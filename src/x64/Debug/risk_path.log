  risk_path.cpp
C:\src\vcpkg\installed\x64-windows\include\ompl\base\ProblemDefinition.h(209,1): warning C4267: "return": Konvertierung von "size_t" nach "unsigned int", Datenverlust möglich
C:\src\vcpkg\installed\x86-windows\include\ogr_featurestyle.h(89,15): warning C4251: "OGRStyleTable::osLastRequestedStyleName": class "CPLString" erfordert eine DLL-Schnittstelle, die von Clients von class "OGRStyleTable" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\cpl_string.h(332): message : Siehe Deklaration von "CPLString"
C:\src\vcpkg\installed\x86-windows\include\cpl_json.h(154,17): warning C4251: "CPLJSONObject::m_osKey": class "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" erfordert eine DLL-Schnittstelle, die von Clients von class "CPLJSONObject" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : Siehe Deklaration von "std::basic_string<char,std::char_traits<char>,std::allocator<char>>"
C:\src\vcpkg\installed\x86-windows\include\ogr_spatialref.h(129,29): warning C4251: "OGR_SRSNode::m_listener": class "std::weak_ptr<OGR_SRSNode::Listener>" erfordert eine DLL-Schnittstelle, die von Clients von class "OGR_SRSNode" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\ogr_spatialref.h(129): message : Siehe Deklaration von "std::weak_ptr<OGR_SRSNode::Listener>"
C:\src\vcpkg\installed\x86-windows\include\ogr_spatialref.h(160,30): warning C4251: "OGRSpatialReference::d": class "std::unique_ptr<OGRSpatialReference::Private,std::default_delete<OGRSpatialReference::Private>>" erfordert eine DLL-Schnittstelle, die von Clients von class "OGRSpatialReference" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\ogr_spatialref.h(160): message : Siehe Deklaration von "std::unique_ptr<OGRSpatialReference::Private,std::default_delete<OGRSpatialReference::Private>>"
C:\src\vcpkg\installed\x86-windows\include\ogr_spatialref.h(828,30): warning C4251: "OGRCoordinateTransformationOptions::d": class "std::unique_ptr<OGRCoordinateTransformationOptions::Private,std::default_delete<OGRCoordinateTransformationOptions::Private>>" erfordert eine DLL-Schnittstelle, die von Clients von struct "OGRCoordinateTransformationOptions" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\ogr_spatialref.h(828): message : Siehe Deklaration von "std::unique_ptr<OGRCoordinateTransformationOptions::Private,std::default_delete<OGRCoordinateTransformationOptions::Private>>"
C:\src\vcpkg\installed\x86-windows\include\ogr_geometry.h(1013,42): warning C4251: "OGRCurve::ConstIterator::m_poPrivate": class "std::unique_ptr<OGRCurve::ConstIterator::Private,std::default_delete<OGRCurve::ConstIterator::Private>>" erfordert eine DLL-Schnittstelle, die von Clients von class "OGRCurve::ConstIterator" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\ogr_geometry.h(1013): message : Siehe Deklaration von "std::unique_ptr<OGRCurve::ConstIterator::Private,std::default_delete<OGRCurve::ConstIterator::Private>>"
C:\src\vcpkg\installed\x86-windows\include\ogr_geometry.h(1132,42): warning C4251: "OGRSimpleCurve::Iterator::m_poPrivate": class "std::unique_ptr<OGRSimpleCurve::Iterator::Private,std::default_delete<OGRSimpleCurve::Iterator::Private>>" erfordert eine DLL-Schnittstelle, die von Clients von class "OGRSimpleCurve::Iterator" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\ogr_geometry.h(1132): message : Siehe Deklaration von "std::unique_ptr<OGRSimpleCurve::Iterator::Private,std::default_delete<OGRSimpleCurve::Iterator::Private>>"
C:\src\vcpkg\installed\x86-windows\include\ogr_geometry.h(1149,42): warning C4251: "OGRSimpleCurve::ConstIterator::m_poPrivate": class "std::unique_ptr<OGRSimpleCurve::ConstIterator::Private,std::default_delete<OGRSimpleCurve::ConstIterator::Private>>" erfordert eine DLL-Schnittstelle, die von Clients von class "OGRSimpleCurve::ConstIterator" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\ogr_geometry.h(1149): message : Siehe Deklaration von "std::unique_ptr<OGRSimpleCurve::ConstIterator::Private,std::default_delete<OGRSimpleCurve::ConstIterator::Private>>"
C:\src\vcpkg\installed\x86-windows\include\ogr_geometry.h(3083,34): warning C4251: "OGRGeometryFactory::TransformWithOptionsCache::d": class "std::unique_ptr<OGRGeometryFactory::TransformWithOptionsCache::Private,std::default_delete<OGRGeometryFactory::TransformWithOptionsCache::Private>>" erfordert eine DLL-Schnittstelle, die von Clients von class "OGRGeometryFactory::TransformWithOptionsCache" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\ogr_geometry.h(3083): message : Siehe Deklaration von "std::unique_ptr<OGRGeometryFactory::TransformWithOptionsCache::Private,std::default_delete<OGRGeometryFactory::TransformWithOptionsCache::Private>>"
C:\src\vcpkg\installed\x86-windows\include\ogr_feature.h(385,34): warning C4251: "OGRFeature::FieldValue::m_poPrivate": class "std::unique_ptr<OGRFeature::FieldValue::Private,std::default_delete<OGRFeature::FieldValue::Private>>" erfordert eine DLL-Schnittstelle, die von Clients von class "OGRFeature::FieldValue" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\ogr_feature.h(385): message : Siehe Deklaration von "std::unique_ptr<OGRFeature::FieldValue::Private,std::default_delete<OGRFeature::FieldValue::Private>>"
C:\src\vcpkg\installed\x86-windows\include\ogr_feature.h(528,34): warning C4251: "OGRFeature::ConstFieldIterator::m_poPrivate": class "std::unique_ptr<OGRFeature::ConstFieldIterator::Private,std::default_delete<OGRFeature::ConstFieldIterator::Private>>" erfordert eine DLL-Schnittstelle, die von Clients von class "OGRFeature::ConstFieldIterator" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\ogr_feature.h(528): message : Siehe Deklaration von "std::unique_ptr<OGRFeature::ConstFieldIterator::Private,std::default_delete<OGRFeature::ConstFieldIterator::Private>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(138,25): warning C4251: "GDALMajorObject::sDescription": class "CPLString" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALMajorObject" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\cpl_string.h(332): message : Siehe Deklaration von "CPLString"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(191,17): warning C4251: "GDALDefaultOverviews::osOvrFilename": class "CPLString" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALDefaultOverviews" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\cpl_string.h(332): message : Siehe Deklaration von "CPLString"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(475,42): warning C4251: "GDALDataset::Bands::Iterator::m_poPrivate": class "std::unique_ptr<GDALDataset::Bands::Iterator::Private,std::default_delete<GDALDataset::Bands::Iterator::Private>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALDataset::Bands::Iterator" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(475): message : Siehe Deklaration von "std::unique_ptr<GDALDataset::Bands::Iterator::Private,std::default_delete<GDALDataset::Bands::Iterator::Private>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(695,42): warning C4251: "GDALDataset::Layers::Iterator::m_poPrivate": class "std::unique_ptr<GDALDataset::Layers::Iterator::Private,std::default_delete<GDALDataset::Layers::Iterator::Private>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALDataset::Layers::Iterator" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(695): message : Siehe Deklaration von "std::unique_ptr<GDALDataset::Layers::Iterator::Private,std::default_delete<GDALDataset::Layers::Iterator::Private>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(753,42): warning C4251: "GDALDataset::Features::Iterator::m_poPrivate": class "std::unique_ptr<GDALDataset::Features::Iterator::Private,std::default_delete<GDALDataset::Features::Iterator::Private>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALDataset::Features::Iterator" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(753): message : Siehe Deklaration von "std::unique_ptr<GDALDataset::Features::Iterator::Private,std::default_delete<GDALDataset::Features::Iterator::Private>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(996,33): warning C4251: "GDALColorTable::aoEntries": class "std::vector<GDALColorEntry,std::allocator<GDALColorEntry>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALColorTable" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(996): message : Siehe Deklaration von "std::vector<GDALColorEntry,std::allocator<GDALColorEntry>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(1613,38): warning C4251: "GDALDriverManager::oMapNameToDrivers": class "std::map<CPLString,GDALDriver *,std::less<CPLString>,std::allocator<std::pair<const CPLString,GDALDriver *>>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALDriverManager" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(1613): message : Siehe Deklaration von "std::map<CPLString,GDALDriver *,std::less<CPLString>,std::allocator<std::pair<const CPLString,GDALDriver *>>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(1845,17): warning C4251: "GDALExtendedDataType::m_osName": class "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALExtendedDataType" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : Siehe Deklaration von "std::basic_string<char,std::char_traits<char>,std::allocator<char>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(1848,52): warning C4251: "GDALExtendedDataType::m_aoComponents": class "std::vector<std::unique_ptr<GDALEDTComponent,std::default_delete<GDALEDTComponent>>,std::allocator<std::unique_ptr<GDALEDTComponent,std::default_delete<GDALEDTComponent>>>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALExtendedDataType" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(1783): message : Siehe Deklaration von "std::vector<std::unique_ptr<GDALEDTComponent,std::default_delete<GDALEDTComponent>>,std::allocator<std::unique_ptr<GDALEDTComponent,std::default_delete<GDALEDTComponent>>>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(1890,26): warning C4251: "GDALEDTComponent::m_osName": class "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALEDTComponent" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : Siehe Deklaration von "std::basic_string<char,std::char_traits<char>,std::allocator<char>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(1939,17): warning C4251: "GDALGroup::m_osName": class "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALGroup" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : Siehe Deklaration von "std::basic_string<char,std::char_traits<char>,std::allocator<char>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(1940,17): warning C4251: "GDALGroup::m_osFullName": class "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALGroup" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : Siehe Deklaration von "std::basic_string<char,std::char_traits<char>,std::allocator<char>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2026,17): warning C4251: "GDALAbstractMDArray::m_osName": class "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALAbstractMDArray" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : Siehe Deklaration von "std::basic_string<char,std::char_traits<char>,std::allocator<char>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2027,17): warning C4251: "GDALAbstractMDArray::m_osFullName": class "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALAbstractMDArray" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : Siehe Deklaration von "std::basic_string<char,std::char_traits<char>,std::allocator<char>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2028,40): warning C4251: "GDALAbstractMDArray::m_pSelf": class "std::weak_ptr<GDALAbstractMDArray>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALAbstractMDArray" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2028): message : Siehe Deklaration von "std::weak_ptr<GDALAbstractMDArray>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2200,25): warning C4251: "GDALAttribute::m_osCachedVal": class "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALAttribute" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : Siehe Deklaration von "std::basic_string<char,std::char_traits<char>,std::allocator<char>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2240,49): warning C4251: "GDALAttributeString::m_dims": class "std::vector<std::shared_ptr<GDALDimension>,std::allocator<std::shared_ptr<GDALDimension>>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALAttributeString" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(1972): message : Siehe Deklaration von "std::vector<std::shared_ptr<GDALDimension>,std::allocator<std::shared_ptr<GDALDimension>>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2242,17): warning C4251: "GDALAttributeString::m_osValue": class "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALAttributeString" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : Siehe Deklaration von "std::basic_string<char,std::char_traits<char>,std::allocator<char>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2271,49): warning C4251: "GDALAttributeNumeric::m_dims": class "std::vector<std::shared_ptr<GDALDimension>,std::allocator<std::shared_ptr<GDALDimension>>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALAttributeNumeric" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(1972): message : Siehe Deklaration von "std::vector<std::shared_ptr<GDALDimension>,std::allocator<std::shared_ptr<GDALDimension>>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2275,26): warning C4251: "GDALAttributeNumeric::m_anValuesUInt32": class "std::vector<std::seed_seq::result_type,std::allocator<std::seed_seq::result_type>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALAttributeNumeric" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\random(244): message : Siehe Deklaration von "std::vector<std::seed_seq::result_type,std::allocator<std::seed_seq::result_type>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2454,49): warning C4251: "GDALMDArrayRegularlySpaced::m_dims": class "std::vector<std::shared_ptr<GDALDimension>,std::allocator<std::shared_ptr<GDALDimension>>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALMDArrayRegularlySpaced" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(1972): message : Siehe Deklaration von "std::vector<std::shared_ptr<GDALDimension>,std::allocator<std::shared_ptr<GDALDimension>>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2455,49): warning C4251: "GDALMDArrayRegularlySpaced::m_attributes": class "std::vector<std::shared_ptr<GDALAttribute>,std::allocator<std::shared_ptr<GDALAttribute>>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALMDArrayRegularlySpaced" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(1914): message : Siehe Deklaration von "std::vector<std::shared_ptr<GDALAttribute>,std::allocator<std::shared_ptr<GDALAttribute>>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2558,17): warning C4251: "GDALDimension::m_osName": class "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALDimension" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : Siehe Deklaration von "std::basic_string<char,std::char_traits<char>,std::allocator<char>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2559,17): warning C4251: "GDALDimension::m_osFullName": class "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALDimension" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : Siehe Deklaration von "std::basic_string<char,std::char_traits<char>,std::allocator<char>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2560,17): warning C4251: "GDALDimension::m_osType": class "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALDimension" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : Siehe Deklaration von "std::basic_string<char,std::char_traits<char>,std::allocator<char>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2561,17): warning C4251: "GDALDimension::m_osDirection": class "std::basic_string<char,std::char_traits<char>,std::allocator<char>>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALDimension" verwendet wird
C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30037\include\xstring(4905): message : Siehe Deklaration von "std::basic_string<char,std::char_traits<char>,std::allocator<char>>"
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2574,32): warning C4251: "GDALDimensionWeakIndexingVar::m_poIndexingVariable": class "std::weak_ptr<GDALMDArray>" erfordert eine DLL-Schnittstelle, die von Clients von class "GDALDimensionWeakIndexingVar" verwendet wird
C:\src\vcpkg\installed\x86-windows\include\gdal_priv.h(2574): message : Siehe Deklaration von "std::weak_ptr<GDALMDArray>"
     Bibliothek "C:\Users\carst\source\repos\risk_path\x64\Debug\risk_path.lib" und Objekt "C:\Users\carst\source\repos\risk_path\x64\Debug\risk_path.exp" werden erstellt.
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol "GDALGetDataTypeSizeBytes" in Funktion ""public: __int64 __cdecl GDALRasterBlock::GetBlockSize(void)const " (?GetBlockSize@GDALRasterBlock@@QEBA_JXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol "GDALGetDataTypeSizeBytes".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol "GDALOpenEx" in Funktion ""public: static class GDALDataset * __cdecl GDALDataset::Open(char const *,unsigned int,char const * const *,char const * const *,char const * const *)" (?Open@GDALDataset@@SAPEAV1@PEBDIPEBQEBD11@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol "GDALOpenEx".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol "GDALClose" in Funktion ""public: void __cdecl GDALDatasetUniquePtrDeleter::operator()(class GDALDataset *)const " (??RGDALDatasetUniquePtrDeleter@@QEBAXPEAVGDALDataset@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol "GDALClose".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol "CPLStrdup" in Funktion ""public: class CPLStringList & __cdecl CPLStringList::InsertString(int,char const *)" (?InsertString@CPLStringList@@QEAAAEAV1@HPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol "CPLStrdup".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol "CSLFindString" in Funktion ""public: int __cdecl CPLStringList::FindString(char const *)const " (?FindString@CPLStringList@@QEBAHPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol "CSLFindString".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol "CSLPartialFindString" in Funktion ""public: int __cdecl CPLStringList::PartialFindString(char const *)const " (?PartialFindString@CPLStringList@@QEBAHPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol "CSLPartialFindString".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: class CPLString & __cdecl CPLString::toupper(void)" (?toupper@CPLString@@QEAAAEAV1@XZ)" in Funktion ""private: class GDALDriver * __cdecl GDALDriverManager::GetDriverByName_unlocked(char const *)" (?GetDriverByName_unlocked@GDALDriverManager@@AEAAPEAVGDALDriver@@PEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: class CPLString & __cdecl CPLString::toupper(void)" (?toupper@CPLString@@QEAAAEAV1@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: int __cdecl CPLStringList::Count(void)const " (?Count@CPLStringList@@QEBAHXZ)" in Funktion ""public: bool __cdecl CPLStringList::empty(void)const " (?empty@CPLStringList@@QEBA_NXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: int __cdecl CPLStringList::Count(void)const " (?Count@CPLStringList@@QEBAHXZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: class CPLStringList & __cdecl CPLStringList::InsertStringDirectly(int,char *)" (?InsertStringDirectly@CPLStringList@@QEAAAEAV1@HPEAD@Z)" in Funktion ""public: class CPLStringList & __cdecl CPLStringList::InsertString(int,char const *)" (?InsertString@CPLStringList@@QEAAAEAV1@HPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: class CPLStringList & __cdecl CPLStringList::InsertStringDirectly(int,char *)" (?InsertStringDirectly@CPLStringList@@QEAAAEAV1@HPEAD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: char const * __cdecl CPLStringList::FetchNameValue(char const *)const " (?FetchNameValue@CPLStringList@@QEBAPEBDPEBD@Z)" in Funktion ""public: char const * __cdecl CPLStringList::operator[](char const *)const " (??ACPLStringList@@QEBAPEBDPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: char const * __cdecl CPLStringList::FetchNameValue(char const *)const " (?FetchNameValue@CPLStringList@@QEBAPEBDPEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: class CPLStringList & __cdecl CPLStringList::Assign(char * *,int)" (?Assign@CPLStringList@@QEAAAEAV1@PEAPEADH@Z)" in Funktion ""public: class CPLStringList & __cdecl CPLStringList::operator=(char * *)" (??4CPLStringList@@QEAAAEAV0@PEAPEAD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: class CPLStringList & __cdecl CPLStringList::Assign(char * *,int)" (?Assign@CPLStringList@@QEAAAEAV1@PEAPEADH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: char * __cdecl CPLStringList::operator[](int)" (??ACPLStringList@@QEAAPEADH@Z)" in Funktion ""public: char * __cdecl CPLStringList::operator[](unsigned __int64)" (??ACPLStringList@@QEAAPEAD_K@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: char * __cdecl CPLStringList::operator[](int)" (??ACPLStringList@@QEAAPEADH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: char const * __cdecl CPLStringList::operator[](int)const " (??ACPLStringList@@QEBAPEBDH@Z)" in Funktion ""public: char const * __cdecl CPLStringList::operator[](unsigned __int64)const " (??ACPLStringList@@QEBAPEBD_K@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: char const * __cdecl CPLStringList::operator[](int)const " (??ACPLStringList@@QEBAPEBDH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol "CPLAtomicAdd" in Funktion ""public: int __cdecl GDALRasterBlock::AddLock(void)" (?AddLock@GDALRasterBlock@@QEAAHXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol "CPLAtomicAdd".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __cdecl OGRStyleMgr::OGRStyleMgr(class OGRStyleTable *)" (??0OGRStyleMgr@@QEAA@PEAVOGRStyleTable@@@Z)" in Funktion ""public: void __cdecl OGRStyleMgr::`default constructor closure'(void)" (??_FOGRStyleMgr@@QEAAXXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __cdecl OGRStyleMgr::OGRStyleMgr(class OGRStyleTable *)" (??0OGRStyleMgr@@QEAA@PEAVOGRStyleTable@@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: virtual __cdecl OGRStyleTool::~OGRStyleTool(void)" (??1OGRStyleTool@@UEAA@XZ)" in Funktion ""public: virtual void * __cdecl OGRStyleTool::`vector deleting destructor'(unsigned int)" (??_EOGRStyleTool@@UEAAPEAXI@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual __cdecl OGRStyleTool::~OGRStyleTool(void)" (??1OGRStyleTool@@UEAA@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: char const * __cdecl OGRStylePen::GetParamStr(enum ogr_style_tool_param_pen_id,int &)" (?GetParamStr@OGRStylePen@@QEAAPEBDW4ogr_style_tool_param_pen_id@@AEAH@Z)" in Funktion ""public: char const * __cdecl OGRStylePen::Cap(int &)" (?Cap@OGRStylePen@@QEAAPEBDAEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: char const * __cdecl OGRStylePen::GetParamStr(enum ogr_style_tool_param_pen_id,int &)" (?GetParamStr@OGRStylePen@@QEAAPEBDW4ogr_style_tool_param_pen_id@@AEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: int __cdecl OGRStylePen::GetParamNum(enum ogr_style_tool_param_pen_id,int &)" (?GetParamNum@OGRStylePen@@QEAAHW4ogr_style_tool_param_pen_id@@AEAH@Z)" in Funktion ""public: int __cdecl OGRStylePen::Priority(int &)" (?Priority@OGRStylePen@@QEAAHAEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: int __cdecl OGRStylePen::GetParamNum(enum ogr_style_tool_param_pen_id,int &)" (?GetParamNum@OGRStylePen@@QEAAHW4ogr_style_tool_param_pen_id@@AEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: double __cdecl OGRStylePen::GetParamDbl(enum ogr_style_tool_param_pen_id,int &)" (?GetParamDbl@OGRStylePen@@QEAANW4ogr_style_tool_param_pen_id@@AEAH@Z)" in Funktion ""public: double __cdecl OGRStylePen::PerpendicularOffset(int &)" (?PerpendicularOffset@OGRStylePen@@QEAANAEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: double __cdecl OGRStylePen::GetParamDbl(enum ogr_style_tool_param_pen_id,int &)" (?GetParamDbl@OGRStylePen@@QEAANW4ogr_style_tool_param_pen_id@@AEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStylePen::SetParamStr(enum ogr_style_tool_param_pen_id,char const *)" (?SetParamStr@OGRStylePen@@QEAAXW4ogr_style_tool_param_pen_id@@PEBD@Z)" in Funktion ""public: void __cdecl OGRStylePen::SetCap(char const *)" (?SetCap@OGRStylePen@@QEAAXPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStylePen::SetParamStr(enum ogr_style_tool_param_pen_id,char const *)" (?SetParamStr@OGRStylePen@@QEAAXW4ogr_style_tool_param_pen_id@@PEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStylePen::SetParamNum(enum ogr_style_tool_param_pen_id,int)" (?SetParamNum@OGRStylePen@@QEAAXW4ogr_style_tool_param_pen_id@@H@Z)" in Funktion ""public: void __cdecl OGRStylePen::SetPriority(int)" (?SetPriority@OGRStylePen@@QEAAXH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStylePen::SetParamNum(enum ogr_style_tool_param_pen_id,int)" (?SetParamNum@OGRStylePen@@QEAAXW4ogr_style_tool_param_pen_id@@H@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStylePen::SetParamDbl(enum ogr_style_tool_param_pen_id,double)" (?SetParamDbl@OGRStylePen@@QEAAXW4ogr_style_tool_param_pen_id@@N@Z)" in Funktion ""public: void __cdecl OGRStylePen::SetPerpendicularOffset(double)" (?SetPerpendicularOffset@OGRStylePen@@QEAAXN@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStylePen::SetParamDbl(enum ogr_style_tool_param_pen_id,double)" (?SetParamDbl@OGRStylePen@@QEAAXW4ogr_style_tool_param_pen_id@@N@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: char const * __cdecl OGRStyleBrush::GetParamStr(enum ogr_style_tool_param_brush_id,int &)" (?GetParamStr@OGRStyleBrush@@QEAAPEBDW4ogr_style_tool_param_brush_id@@AEAH@Z)" in Funktion ""public: char const * __cdecl OGRStyleBrush::BackColor(int &)" (?BackColor@OGRStyleBrush@@QEAAPEBDAEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: char const * __cdecl OGRStyleBrush::GetParamStr(enum ogr_style_tool_param_brush_id,int &)" (?GetParamStr@OGRStyleBrush@@QEAAPEBDW4ogr_style_tool_param_brush_id@@AEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: int __cdecl OGRStyleBrush::GetParamNum(enum ogr_style_tool_param_brush_id,int &)" (?GetParamNum@OGRStyleBrush@@QEAAHW4ogr_style_tool_param_brush_id@@AEAH@Z)" in Funktion ""public: int __cdecl OGRStyleBrush::Priority(int &)" (?Priority@OGRStyleBrush@@QEAAHAEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: int __cdecl OGRStyleBrush::GetParamNum(enum ogr_style_tool_param_brush_id,int &)" (?GetParamNum@OGRStyleBrush@@QEAAHW4ogr_style_tool_param_brush_id@@AEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: double __cdecl OGRStyleBrush::GetParamDbl(enum ogr_style_tool_param_brush_id,int &)" (?GetParamDbl@OGRStyleBrush@@QEAANW4ogr_style_tool_param_brush_id@@AEAH@Z)" in Funktion ""public: double __cdecl OGRStyleBrush::Angle(int &)" (?Angle@OGRStyleBrush@@QEAANAEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: double __cdecl OGRStyleBrush::GetParamDbl(enum ogr_style_tool_param_brush_id,int &)" (?GetParamDbl@OGRStyleBrush@@QEAANW4ogr_style_tool_param_brush_id@@AEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleBrush::SetParamStr(enum ogr_style_tool_param_brush_id,char const *)" (?SetParamStr@OGRStyleBrush@@QEAAXW4ogr_style_tool_param_brush_id@@PEBD@Z)" in Funktion ""public: void __cdecl OGRStyleBrush::SetBackColor(char const *)" (?SetBackColor@OGRStyleBrush@@QEAAXPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleBrush::SetParamStr(enum ogr_style_tool_param_brush_id,char const *)" (?SetParamStr@OGRStyleBrush@@QEAAXW4ogr_style_tool_param_brush_id@@PEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleBrush::SetParamNum(enum ogr_style_tool_param_brush_id,int)" (?SetParamNum@OGRStyleBrush@@QEAAXW4ogr_style_tool_param_brush_id@@H@Z)" in Funktion ""public: void __cdecl OGRStyleBrush::SetPriority(int)" (?SetPriority@OGRStyleBrush@@QEAAXH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleBrush::SetParamNum(enum ogr_style_tool_param_brush_id,int)" (?SetParamNum@OGRStyleBrush@@QEAAXW4ogr_style_tool_param_brush_id@@H@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleBrush::SetParamDbl(enum ogr_style_tool_param_brush_id,double)" (?SetParamDbl@OGRStyleBrush@@QEAAXW4ogr_style_tool_param_brush_id@@N@Z)" in Funktion ""public: void __cdecl OGRStyleBrush::SetAngle(double)" (?SetAngle@OGRStyleBrush@@QEAAXN@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleBrush::SetParamDbl(enum ogr_style_tool_param_brush_id,double)" (?SetParamDbl@OGRStyleBrush@@QEAAXW4ogr_style_tool_param_brush_id@@N@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: char const * __cdecl OGRStyleSymbol::GetParamStr(enum ogr_style_tool_param_symbol_id,int &)" (?GetParamStr@OGRStyleSymbol@@QEAAPEBDW4ogr_style_tool_param_symbol_id@@AEAH@Z)" in Funktion ""public: char const * __cdecl OGRStyleSymbol::Color(int &)" (?Color@OGRStyleSymbol@@QEAAPEBDAEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: char const * __cdecl OGRStyleSymbol::GetParamStr(enum ogr_style_tool_param_symbol_id,int &)" (?GetParamStr@OGRStyleSymbol@@QEAAPEBDW4ogr_style_tool_param_symbol_id@@AEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: int __cdecl OGRStyleSymbol::GetParamNum(enum ogr_style_tool_param_symbol_id,int &)" (?GetParamNum@OGRStyleSymbol@@QEAAHW4ogr_style_tool_param_symbol_id@@AEAH@Z)" in Funktion ""public: int __cdecl OGRStyleSymbol::Priority(int &)" (?Priority@OGRStyleSymbol@@QEAAHAEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: int __cdecl OGRStyleSymbol::GetParamNum(enum ogr_style_tool_param_symbol_id,int &)" (?GetParamNum@OGRStyleSymbol@@QEAAHW4ogr_style_tool_param_symbol_id@@AEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: double __cdecl OGRStyleSymbol::GetParamDbl(enum ogr_style_tool_param_symbol_id,int &)" (?GetParamDbl@OGRStyleSymbol@@QEAANW4ogr_style_tool_param_symbol_id@@AEAH@Z)" in Funktion ""public: double __cdecl OGRStyleSymbol::Angle(int &)" (?Angle@OGRStyleSymbol@@QEAANAEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: double __cdecl OGRStyleSymbol::GetParamDbl(enum ogr_style_tool_param_symbol_id,int &)" (?GetParamDbl@OGRStyleSymbol@@QEAANW4ogr_style_tool_param_symbol_id@@AEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleSymbol::SetParamStr(enum ogr_style_tool_param_symbol_id,char const *)" (?SetParamStr@OGRStyleSymbol@@QEAAXW4ogr_style_tool_param_symbol_id@@PEBD@Z)" in Funktion ""public: void __cdecl OGRStyleSymbol::SetColor(char const *)" (?SetColor@OGRStyleSymbol@@QEAAXPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleSymbol::SetParamStr(enum ogr_style_tool_param_symbol_id,char const *)" (?SetParamStr@OGRStyleSymbol@@QEAAXW4ogr_style_tool_param_symbol_id@@PEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleSymbol::SetParamNum(enum ogr_style_tool_param_symbol_id,int)" (?SetParamNum@OGRStyleSymbol@@QEAAXW4ogr_style_tool_param_symbol_id@@H@Z)" in Funktion ""public: void __cdecl OGRStyleSymbol::SetPriority(int)" (?SetPriority@OGRStyleSymbol@@QEAAXH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleSymbol::SetParamNum(enum ogr_style_tool_param_symbol_id,int)" (?SetParamNum@OGRStyleSymbol@@QEAAXW4ogr_style_tool_param_symbol_id@@H@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleSymbol::SetParamDbl(enum ogr_style_tool_param_symbol_id,double)" (?SetParamDbl@OGRStyleSymbol@@QEAAXW4ogr_style_tool_param_symbol_id@@N@Z)" in Funktion ""public: void __cdecl OGRStyleSymbol::SetAngle(double)" (?SetAngle@OGRStyleSymbol@@QEAAXN@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleSymbol::SetParamDbl(enum ogr_style_tool_param_symbol_id,double)" (?SetParamDbl@OGRStyleSymbol@@QEAAXW4ogr_style_tool_param_symbol_id@@N@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: char const * __cdecl OGRStyleLabel::GetParamStr(enum ogr_style_tool_param_label_id,int &)" (?GetParamStr@OGRStyleLabel@@QEAAPEBDW4ogr_style_tool_param_label_id@@AEAH@Z)" in Funktion ""public: char const * __cdecl OGRStyleLabel::BackColor(int &)" (?BackColor@OGRStyleLabel@@QEAAPEBDAEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: char const * __cdecl OGRStyleLabel::GetParamStr(enum ogr_style_tool_param_label_id,int &)" (?GetParamStr@OGRStyleLabel@@QEAAPEBDW4ogr_style_tool_param_label_id@@AEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: int __cdecl OGRStyleLabel::GetParamNum(enum ogr_style_tool_param_label_id,int &)" (?GetParamNum@OGRStyleLabel@@QEAAHW4ogr_style_tool_param_label_id@@AEAH@Z)" in Funktion ""public: int __cdecl OGRStyleLabel::Anchor(int &)" (?Anchor@OGRStyleLabel@@QEAAHAEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: int __cdecl OGRStyleLabel::GetParamNum(enum ogr_style_tool_param_label_id,int &)" (?GetParamNum@OGRStyleLabel@@QEAAHW4ogr_style_tool_param_label_id@@AEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: double __cdecl OGRStyleLabel::GetParamDbl(enum ogr_style_tool_param_label_id,int &)" (?GetParamDbl@OGRStyleLabel@@QEAANW4ogr_style_tool_param_label_id@@AEAH@Z)" in Funktion ""public: double __cdecl OGRStyleLabel::Angle(int &)" (?Angle@OGRStyleLabel@@QEAANAEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: double __cdecl OGRStyleLabel::GetParamDbl(enum ogr_style_tool_param_label_id,int &)" (?GetParamDbl@OGRStyleLabel@@QEAANW4ogr_style_tool_param_label_id@@AEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleLabel::SetParamStr(enum ogr_style_tool_param_label_id,char const *)" (?SetParamStr@OGRStyleLabel@@QEAAXW4ogr_style_tool_param_label_id@@PEBD@Z)" in Funktion ""public: void __cdecl OGRStyleLabel::SetBackColor(char const *)" (?SetBackColor@OGRStyleLabel@@QEAAXPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleLabel::SetParamStr(enum ogr_style_tool_param_label_id,char const *)" (?SetParamStr@OGRStyleLabel@@QEAAXW4ogr_style_tool_param_label_id@@PEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleLabel::SetParamNum(enum ogr_style_tool_param_label_id,int)" (?SetParamNum@OGRStyleLabel@@QEAAXW4ogr_style_tool_param_label_id@@H@Z)" in Funktion ""public: void __cdecl OGRStyleLabel::SetAnchor(int)" (?SetAnchor@OGRStyleLabel@@QEAAXH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleLabel::SetParamNum(enum ogr_style_tool_param_label_id,int)" (?SetParamNum@OGRStyleLabel@@QEAAXW4ogr_style_tool_param_label_id@@H@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleLabel::SetParamDbl(enum ogr_style_tool_param_label_id,double)" (?SetParamDbl@OGRStyleLabel@@QEAAXW4ogr_style_tool_param_label_id@@N@Z)" in Funktion ""public: void __cdecl OGRStyleLabel::SetAngle(double)" (?SetAngle@OGRStyleLabel@@QEAAXN@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRStyleLabel::SetParamDbl(enum ogr_style_tool_param_label_id,double)" (?SetParamDbl@OGRStyleLabel@@QEAAXW4ogr_style_tool_param_label_id@@N@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __cdecl CPLJSONObject::~CPLJSONObject(void)" (??1CPLJSONObject@@QEAA@XZ)" in Funktion ""public: __cdecl CPLJSONArray::~CPLJSONArray(void)" (??1CPLJSONArray@@QEAA@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __cdecl CPLJSONObject::~CPLJSONObject(void)" (??1CPLJSONObject@@QEAA@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __cdecl CPLJSONObject::CPLJSONObject(class CPLJSONObject const &)" (??0CPLJSONObject@@QEAA@AEBV0@@Z)" in Funktion ""public: __cdecl CPLJSONArray::CPLJSONArray(class CPLJSONArray &&)" (??0CPLJSONArray@@QEAA@$$QEAV0@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __cdecl CPLJSONObject::CPLJSONObject(class CPLJSONObject const &)" (??0CPLJSONObject@@QEAA@AEBV0@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: class CPLJSONObject & __cdecl CPLJSONObject::operator=(class CPLJSONObject const &)" (??4CPLJSONObject@@QEAAAEAV0@AEBV0@@Z)" in Funktion ""public: class CPLJSONArray & __cdecl CPLJSONArray::operator=(class CPLJSONArray const &)" (??4CPLJSONArray@@QEAAAEAV0@AEBV0@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: class CPLJSONObject & __cdecl CPLJSONObject::operator=(class CPLJSONObject const &)" (??4CPLJSONObject@@QEAAAEAV0@AEBV0@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: class CPLJSONObject & __cdecl CPLJSONObject::operator=(class CPLJSONObject &&)" (??4CPLJSONObject@@QEAAAEAV0@$$QEAV0@@Z)" in Funktion ""public: class CPLJSONArray & __cdecl CPLJSONArray::operator=(class CPLJSONArray &&)" (??4CPLJSONArray@@QEAAAEAV0@$$QEAV0@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: class CPLJSONObject & __cdecl CPLJSONObject::operator=(class CPLJSONObject &&)" (??4CPLJSONObject@@QEAAAEAV0@$$QEAV0@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __cdecl OGR_SRSNode::OGR_SRSNode(char const *)" (??0OGR_SRSNode@@QEAA@PEBD@Z)" in Funktion ""public: void __cdecl OGR_SRSNode::`default constructor closure'(void)" (??_FOGR_SRSNode@@QEAAXXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __cdecl OGR_SRSNode::OGR_SRSNode(char const *)" (??0OGR_SRSNode@@QEAA@PEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __cdecl OGRSpatialReference::OGRSpatialReference(char const *)" (??0OGRSpatialReference@@QEAA@PEBD@Z)" in Funktion ""public: void __cdecl OGRSpatialReference::`default constructor closure'(void)" (??_FOGRSpatialReference@@QEAAXXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __cdecl OGRSpatialReference::OGRSpatialReference(char const *)" (??0OGRSpatialReference@@QEAA@PEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: double __cdecl OGRSpatialReference::GetLinearUnits(char const * *)const " (?GetLinearUnits@OGRSpatialReference@@QEBANPEAPEBD@Z)" in Funktion ""public: double __cdecl OGRSpatialReference::GetLinearUnits(std::nullptr_t)const " (?GetLinearUnits@OGRSpatialReference@@QEBAN$$T@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: double __cdecl OGRSpatialReference::GetLinearUnits(char const * *)const " (?GetLinearUnits@OGRSpatialReference@@QEBANPEAPEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: double __cdecl OGRSpatialReference::GetTargetLinearUnits(char const *,char const * *)const " (?GetTargetLinearUnits@OGRSpatialReference@@QEBANPEBDPEAPEBD@Z)" in Funktion ""public: double __cdecl OGRSpatialReference::GetTargetLinearUnits(char const *,std::nullptr_t)const " (?GetTargetLinearUnits@OGRSpatialReference@@QEBANPEBD$$T@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: double __cdecl OGRSpatialReference::GetTargetLinearUnits(char const *,char const * *)const " (?GetTargetLinearUnits@OGRSpatialReference@@QEBANPEBDPEAPEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: double __cdecl OGRSpatialReference::GetAngularUnits(char const * *)const " (?GetAngularUnits@OGRSpatialReference@@QEBANPEAPEBD@Z)" in Funktion ""public: double __cdecl OGRSpatialReference::GetAngularUnits(std::nullptr_t)const " (?GetAngularUnits@OGRSpatialReference@@QEBAN$$T@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: double __cdecl OGRSpatialReference::GetAngularUnits(char const * *)const " (?GetAngularUnits@OGRSpatialReference@@QEBANPEAPEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: double __cdecl OGRSpatialReference::GetPrimeMeridian(char const * *)const " (?GetPrimeMeridian@OGRSpatialReference@@QEBANPEAPEBD@Z)" in Funktion ""public: double __cdecl OGRSpatialReference::GetPrimeMeridian(std::nullptr_t)const " (?GetPrimeMeridian@OGRSpatialReference@@QEBAN$$T@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: double __cdecl OGRSpatialReference::GetPrimeMeridian(char const * *)const " (?GetPrimeMeridian@OGRSpatialReference@@QEBANPEAPEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""private: static int __cdecl OGRWktOptions::getDefaultPrecision(void)" (?getDefaultPrecision@OGRWktOptions@@CAHXZ)" in Funktion ""public: __cdecl OGRWktOptions::OGRWktOptions(void)" (??0OGRWktOptions@@QEAA@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""private: static int __cdecl OGRWktOptions::getDefaultPrecision(void)" (?getDefaultPrecision@OGRWktOptions@@CAHXZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""private: static bool __cdecl OGRWktOptions::getDefaultRound(void)" (?getDefaultRound@OGRWktOptions@@CA_NXZ)" in Funktion ""public: __cdecl OGRWktOptions::OGRWktOptions(void)" (??0OGRWktOptions@@QEAA@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""private: static bool __cdecl OGRWktOptions::getDefaultRound(void)" (?getDefaultRound@OGRWktOptions@@CA_NXZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRLineString *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRLineString@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRLineString *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRLineString@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRLinearRing *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRLinearRing@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRLinearRing *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRLinearRing@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRPolygon *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRPolygon@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRPolygon *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRPolygon@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRMultiPoint *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRMultiPoint@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRMultiPoint *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRMultiPoint@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRMultiLineString *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRMultiLineString@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRMultiLineString *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRMultiLineString@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRMultiPolygon *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRMultiPolygon@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRMultiPolygon *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRMultiPolygon@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRGeometryCollection *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRGeometryCollection@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRGeometryCollection *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRGeometryCollection@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRCircularString *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRCircularString@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRCircularString *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRCircularString@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRCompoundCurve *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRCompoundCurve@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRCompoundCurve *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRCompoundCurve@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRCurvePolygon *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRCurvePolygon@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRCurvePolygon *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRCurvePolygon@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRMultiCurve *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRMultiCurve@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRMultiCurve *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRMultiCurve@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRMultiSurface *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRMultiSurface@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRMultiSurface *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRMultiSurface@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRTriangle *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRTriangle@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRTriangle *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRTriangle@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRPolyhedralSurface *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRPolyhedralSurface@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRPolyhedralSurface *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRPolyhedralSurface@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRTriangulatedSurface *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRTriangulatedSurface@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultGeometryVisitor::visit(class OGRTriangulatedSurface *)" (?visit@OGRDefaultGeometryVisitor@@UEAAXPEAVOGRTriangulatedSurface@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRLineString const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRLineString@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRLineString const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRLineString@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRLinearRing const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRLinearRing@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRLinearRing const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRLinearRing@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRPolygon const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRPolygon@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRPolygon const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRPolygon@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRMultiPoint const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRMultiPoint@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRMultiPoint const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRMultiPoint@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRMultiLineString const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRMultiLineString@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRMultiLineString const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRMultiLineString@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRMultiPolygon const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRMultiPolygon@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRMultiPolygon const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRMultiPolygon@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRGeometryCollection const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRGeometryCollection@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRGeometryCollection const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRGeometryCollection@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRCircularString const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRCircularString@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRCircularString const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRCircularString@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRCompoundCurve const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRCompoundCurve@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRCompoundCurve const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRCompoundCurve@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRCurvePolygon const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRCurvePolygon@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRCurvePolygon const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRCurvePolygon@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRMultiCurve const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRMultiCurve@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRMultiCurve const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRMultiCurve@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRMultiSurface const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRMultiSurface@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRMultiSurface const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRMultiSurface@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRTriangle const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRTriangle@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRTriangle const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRTriangle@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRPolyhedralSurface const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRPolyhedralSurface@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRPolyhedralSurface const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRPolyhedralSurface@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRTriangulatedSurface const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRTriangulatedSurface@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRDefaultConstGeometryVisitor::visit(class OGRTriangulatedSurface const *)" (?visit@OGRDefaultConstGeometryVisitor@@UEAAXPEBVOGRTriangulatedSurface@@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""protected: int __cdecl OGRGeometry::PointOnSurfaceInternal(class OGRPoint *)const " (?PointOnSurfaceInternal@OGRGeometry@@IEBAHPEAVOGRPoint@@@Z)" in Funktion ""public: virtual int __cdecl OGRSurface::PointOnSurface(class OGRPoint *)const " (?PointOnSurface@OGRSurface@@UEBAHPEAVOGRPoint@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""protected: int __cdecl OGRGeometry::PointOnSurfaceInternal(class OGRPoint *)const " (?PointOnSurfaceInternal@OGRGeometry@@IEBAHPEAVOGRPoint@@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __cdecl OGRGeometry::OGRGeometry(void)" (??0OGRGeometry@@QEAA@XZ)" in Funktion ""public: __cdecl OGRSurface::OGRSurface(void)" (??0OGRSurface@@QEAA@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __cdecl OGRGeometry::OGRGeometry(void)" (??0OGRGeometry@@QEAA@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __cdecl OGRGeometry::OGRGeometry(class OGRGeometry const &)" (??0OGRGeometry@@QEAA@AEBV0@@Z)" in Funktion ""public: __cdecl OGRSurface::OGRSurface(class OGRSurface &&)" (??0OGRSurface@@QEAA@$$QEAV0@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __cdecl OGRGeometry::OGRGeometry(class OGRGeometry const &)" (??0OGRGeometry@@QEAA@AEBV0@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: virtual __cdecl OGRGeometry::~OGRGeometry(void)" (??1OGRGeometry@@UEAA@XZ)" in Funktion ""public: virtual __cdecl OGRSurface::~OGRSurface(void)" (??1OGRSurface@@UEAA@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual __cdecl OGRGeometry::~OGRGeometry(void)" (??1OGRGeometry@@UEAA@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: class OGRGeometry & __cdecl OGRGeometry::operator=(class OGRGeometry const &)" (??4OGRGeometry@@QEAAAEAV0@AEBV0@@Z)" in Funktion ""public: class OGRSurface & __cdecl OGRSurface::operator=(class OGRSurface &&)" (??4OGRSurface@@QEAAAEAV0@$$QEAV0@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: class OGRGeometry & __cdecl OGRGeometry::operator=(class OGRGeometry const &)" (??4OGRGeometry@@QEAAAEAV0@AEBV0@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::getCoordinateDimension(void)const " (?getCoordinateDimension@OGRGeometry@@UEBAHXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::getCoordinateDimension(void)const " (?getCoordinateDimension@OGRGeometry@@UEBAHXZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::IsValid(void)const " (?IsValid@OGRGeometry@@UEBAHXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::IsValid(void)const " (?IsValid@OGRGeometry@@UEBAHXZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::MakeValid(void)const " (?MakeValid@OGRGeometry@@UEBAPEAV1@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::MakeValid(void)const " (?MakeValid@OGRGeometry@@UEBAPEAV1@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::IsSimple(void)const " (?IsSimple@OGRGeometry@@UEBAHXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::IsSimple(void)const " (?IsSimple@OGRGeometry@@UEBAHXZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::IsRing(void)const " (?IsRing@OGRGeometry@@UEBAHXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::IsRing(void)const " (?IsRing@OGRGeometry@@UEBAHXZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::dumpReadable(struct _iobuf *,char const *,char * *)const " (?dumpReadable@OGRGeometry@@UEBAXPEAU_iobuf@@PEBDPEAPEAD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::dumpReadable(struct _iobuf *,char const *,char * *)const " (?dumpReadable@OGRGeometry@@UEBAXPEAU_iobuf@@PEBDPEAPEAD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual char * __cdecl OGRGeometry::exportToGML(char const * const *)const " (?exportToGML@OGRGeometry@@UEBAPEADPEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual char * __cdecl OGRGeometry::exportToGML(char const * const *)const " (?exportToGML@OGRGeometry@@UEBAPEADPEBQEBD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual char * __cdecl OGRGeometry::exportToKML(void)const " (?exportToKML@OGRGeometry@@UEBAPEADXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual char * __cdecl OGRGeometry::exportToKML(void)const " (?exportToKML@OGRGeometry@@UEBAPEADXZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual char * __cdecl OGRGeometry::exportToJson(void)const " (?exportToJson@OGRGeometry@@UEBAPEADXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual char * __cdecl OGRGeometry::exportToJson(void)const " (?exportToJson@OGRGeometry@@UEBAPEADXZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual struct GEOSGeom_t * __cdecl OGRGeometry::exportToGEOS(struct GEOSContextHandle_HS *)const " (?exportToGEOS@OGRGeometry@@UEBAPEAUGEOSGeom_t@@PEAUGEOSContextHandle_HS@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual struct GEOSGeom_t * __cdecl OGRGeometry::exportToGEOS(struct GEOSContextHandle_HS *)const " (?exportToGEOS@OGRGeometry@@UEBAPEAUGEOSGeom_t@@PEAUGEOSContextHandle_HS@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::hasCurveGeometry(int)const " (?hasCurveGeometry@OGRGeometry@@UEBAHH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::hasCurveGeometry(int)const " (?hasCurveGeometry@OGRGeometry@@UEBAHH@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::getCurveGeometry(char const * const *)const " (?getCurveGeometry@OGRGeometry@@UEBAPEAV1@PEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::getCurveGeometry(char const * const *)const " (?getCurveGeometry@OGRGeometry@@UEBAPEAV1@PEBQEBD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::getLinearGeometry(double,char const * const *)const " (?getLinearGeometry@OGRGeometry@@UEBAPEAV1@NPEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::getLinearGeometry(double,char const * const *)const " (?getLinearGeometry@OGRGeometry@@UEBAPEAV1@NPEBQEBD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::closeRings(void)" (?closeRings@OGRGeometry@@UEAAXXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::closeRings(void)" (?closeRings@OGRGeometry@@UEAAXXZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::setCoordinateDimension(int)" (?setCoordinateDimension@OGRGeometry@@UEAAXH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::setCoordinateDimension(int)" (?setCoordinateDimension@OGRGeometry@@UEAAXH@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::set3D(int)" (?set3D@OGRGeometry@@UEAAXH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::set3D(int)" (?set3D@OGRGeometry@@UEAAXH@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::setMeasured(int)" (?setMeasured@OGRGeometry@@UEAAXH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::setMeasured(int)" (?setMeasured@OGRGeometry@@UEAAXH@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::assignSpatialReference(class OGRSpatialReference *)" (?assignSpatialReference@OGRGeometry@@UEAAXPEAVOGRSpatialReference@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::assignSpatialReference(class OGRSpatialReference *)" (?assignSpatialReference@OGRGeometry@@UEAAXPEAVOGRSpatialReference@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::segmentize(double)" (?segmentize@OGRGeometry@@UEAAXN@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::segmentize(double)" (?segmentize@OGRGeometry@@UEAAXN@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Intersects(class OGRGeometry const *)const " (?Intersects@OGRGeometry@@UEBAHPEBV1@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Intersects(class OGRGeometry const *)const " (?Intersects@OGRGeometry@@UEBAHPEBV1@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Disjoint(class OGRGeometry const *)const " (?Disjoint@OGRGeometry@@UEBAHPEBV1@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Disjoint(class OGRGeometry const *)const " (?Disjoint@OGRGeometry@@UEBAHPEBV1@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Touches(class OGRGeometry const *)const " (?Touches@OGRGeometry@@UEBAHPEBV1@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Touches(class OGRGeometry const *)const " (?Touches@OGRGeometry@@UEBAHPEBV1@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Crosses(class OGRGeometry const *)const " (?Crosses@OGRGeometry@@UEBAHPEBV1@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Crosses(class OGRGeometry const *)const " (?Crosses@OGRGeometry@@UEBAHPEBV1@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Within(class OGRGeometry const *)const " (?Within@OGRGeometry@@UEBAHPEBV1@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Within(class OGRGeometry const *)const " (?Within@OGRGeometry@@UEBAHPEBV1@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Contains(class OGRGeometry const *)const " (?Contains@OGRGeometry@@UEBAHPEBV1@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Contains(class OGRGeometry const *)const " (?Contains@OGRGeometry@@UEBAHPEBV1@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Overlaps(class OGRGeometry const *)const " (?Overlaps@OGRGeometry@@UEBAHPEBV1@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Overlaps(class OGRGeometry const *)const " (?Overlaps@OGRGeometry@@UEBAHPEBV1@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Boundary(void)const " (?Boundary@OGRGeometry@@UEBAPEAV1@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Boundary(void)const " (?Boundary@OGRGeometry@@UEBAPEAV1@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual double __cdecl OGRGeometry::Distance(class OGRGeometry const *)const " (?Distance@OGRGeometry@@UEBANPEBV1@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual double __cdecl OGRGeometry::Distance(class OGRGeometry const *)const " (?Distance@OGRGeometry@@UEBANPEBV1@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::ConvexHull(void)const " (?ConvexHull@OGRGeometry@@UEBAPEAV1@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::ConvexHull(void)const " (?ConvexHull@OGRGeometry@@UEBAPEAV1@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Buffer(double,int)const " (?Buffer@OGRGeometry@@UEBAPEAV1@NH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Buffer(double,int)const " (?Buffer@OGRGeometry@@UEBAPEAV1@NH@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Intersection(class OGRGeometry const *)const " (?Intersection@OGRGeometry@@UEBAPEAV1@PEBV1@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Intersection(class OGRGeometry const *)const " (?Intersection@OGRGeometry@@UEBAPEAV1@PEBV1@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Union(class OGRGeometry const *)const " (?Union@OGRGeometry@@UEBAPEAV1@PEBV1@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Union(class OGRGeometry const *)const " (?Union@OGRGeometry@@UEBAPEAV1@PEBV1@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::UnionCascaded(void)const " (?UnionCascaded@OGRGeometry@@UEBAPEAV1@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::UnionCascaded(void)const " (?UnionCascaded@OGRGeometry@@UEBAPEAV1@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Difference(class OGRGeometry const *)const " (?Difference@OGRGeometry@@UEBAPEAV1@PEBV1@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Difference(class OGRGeometry const *)const " (?Difference@OGRGeometry@@UEBAPEAV1@PEBV1@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::SymDifference(class OGRGeometry const *)const " (?SymDifference@OGRGeometry@@UEBAPEAV1@PEBV1@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::SymDifference(class OGRGeometry const *)const " (?SymDifference@OGRGeometry@@UEBAPEAV1@PEBV1@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Centroid(class OGRPoint *)const " (?Centroid@OGRGeometry@@UEBAHPEAVOGRPoint@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual int __cdecl OGRGeometry::Centroid(class OGRPoint *)const " (?Centroid@OGRGeometry@@UEBAHPEAVOGRPoint@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Simplify(double)const " (?Simplify@OGRGeometry@@UEBAPEAV1@N@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Simplify(double)const " (?Simplify@OGRGeometry@@UEBAPEAV1@N@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::DelaunayTriangulation(double,int)const " (?DelaunayTriangulation@OGRGeometry@@UEBAPEAV1@NH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::DelaunayTriangulation(double,int)const " (?DelaunayTriangulation@OGRGeometry@@UEBAPEAV1@NH@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Polygonize(void)const " (?Polygonize@OGRGeometry@@UEBAPEAV1@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class OGRGeometry * __cdecl OGRGeometry::Polygonize(void)const " (?Polygonize@OGRGeometry@@UEBAPEAV1@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual double __cdecl OGRGeometry::Distance3D(class OGRGeometry const *)const " (?Distance3D@OGRGeometry@@UEBANPEBV1@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual double __cdecl OGRGeometry::Distance3D(class OGRGeometry const *)const " (?Distance3D@OGRGeometry@@UEBANPEBV1@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::swapXY(void)" (?swapXY@OGRGeometry@@UEAAXXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void __cdecl OGRGeometry::swapXY(void)" (?swapXY@OGRGeometry@@UEAAXXZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: virtual __cdecl OGRPointIterator::~OGRPointIterator(void)" (??1OGRPointIterator@@UEAA@XZ)" in Funktion ""public: virtual void * __cdecl OGRPointIterator::`vector deleting destructor'(unsigned int)" (??_EOGRPointIterator@@UEAAPEAXI@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual __cdecl OGRPointIterator::~OGRPointIterator(void)" (??1OGRPointIterator@@UEAA@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: static int __cdecl OGRGeometryFactory::createFromWkt(char const * *,class OGRSpatialReference *,class OGRGeometry * *)" (?createFromWkt@OGRGeometryFactory@@SAHPEAPEBDPEAVOGRSpatialReference@@PEAPEAVOGRGeometry@@@Z)" in Funktion ""public: static int __cdecl OGRGeometryFactory::createFromWkt(char * *,class OGRSpatialReference *,class OGRGeometry * *)" (?createFromWkt@OGRGeometryFactory@@SAHPEAPEADPEAVOGRSpatialReference@@PEAPEAVOGRGeometry@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: static int __cdecl OGRGeometryFactory::createFromWkt(char const * *,class OGRSpatialReference *,class OGRGeometry * *)" (?createFromWkt@OGRGeometryFactory@@SAHPEAPEBDPEAVOGRSpatialReference@@PEAPEAVOGRGeometry@@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __cdecl OGRFeatureDefn::OGRFeatureDefn(char const *)" (??0OGRFeatureDefn@@QEAA@PEBD@Z)" in Funktion ""public: void __cdecl OGRFeatureDefn::`default constructor closure'(void)" (??_FOGRFeatureDefn@@QEAAXXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __cdecl OGRFeatureDefn::OGRFeatureDefn(char const *)" (??0OGRFeatureDefn@@QEAA@PEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::FieldValue::clear(void)" (?clear@FieldValue@OGRFeature@@QEAAXXZ)" in Funktion ""public: void __cdecl OGRFeature::FieldValue::Unset(void)" (?Unset@FieldValue@OGRFeature@@QEAAXXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::FieldValue::clear(void)" (?clear@FieldValue@OGRFeature@@QEAAXXZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: class OGRFieldDefn const * __cdecl OGRFeature::FieldValue::GetDefn(void)const " (?GetDefn@FieldValue@OGRFeature@@QEBAPEBVOGRFieldDefn@@XZ)" in Funktion ""public: char const * __cdecl OGRFeature::FieldValue::GetName(void)const " (?GetName@FieldValue@OGRFeature@@QEBAPEBDXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: class OGRFieldDefn const * __cdecl OGRFeature::FieldValue::GetDefn(void)const " (?GetDefn@FieldValue@OGRFeature@@QEBAPEBVOGRFieldDefn@@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: bool __cdecl OGRFeature::FieldValue::IsUnset(void)const " (?IsUnset@FieldValue@OGRFeature@@QEBA_NXZ)" in Funktion ""public: bool __cdecl OGRFeature::FieldValue::empty(void)const " (?empty@FieldValue@OGRFeature@@QEBA_NXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: bool __cdecl OGRFeature::FieldValue::IsUnset(void)const " (?IsUnset@FieldValue@OGRFeature@@QEBA_NXZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: union OGRField const * __cdecl OGRFeature::FieldValue::GetRawValue(void)const " (?GetRawValue@FieldValue@OGRFeature@@QEBAPEBTOGRField@@XZ)" in Funktion ""public: double __cdecl OGRFeature::FieldValue::GetDouble(void)const " (?GetDouble@FieldValue@OGRFeature@@QEBANXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: union OGRField const * __cdecl OGRFeature::FieldValue::GetRawValue(void)const " (?GetRawValue@FieldValue@OGRFeature@@QEBAPEBTOGRField@@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: int __cdecl OGRFeature::FieldValue::GetAsInteger(void)const " (?GetAsInteger@FieldValue@OGRFeature@@QEBAHXZ)" in Funktion ""public: __cdecl OGRFeature::FieldValue::operator int(void)const " (??BFieldValue@OGRFeature@@QEBAHXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: int __cdecl OGRFeature::FieldValue::GetAsInteger(void)const " (?GetAsInteger@FieldValue@OGRFeature@@QEBAHXZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __int64 __cdecl OGRFeature::FieldValue::GetAsInteger64(void)const " (?GetAsInteger64@FieldValue@OGRFeature@@QEBA_JXZ)" in Funktion ""public: __cdecl OGRFeature::FieldValue::operator __int64(void)const " (??BFieldValue@OGRFeature@@QEBA_JXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __int64 __cdecl OGRFeature::FieldValue::GetAsInteger64(void)const " (?GetAsInteger64@FieldValue@OGRFeature@@QEBA_JXZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: double __cdecl OGRFeature::FieldValue::GetAsDouble(void)const " (?GetAsDouble@FieldValue@OGRFeature@@QEBANXZ)" in Funktion ""public: __cdecl OGRFeature::FieldValue::operator double(void)const " (??BFieldValue@OGRFeature@@QEBANXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: double __cdecl OGRFeature::FieldValue::GetAsDouble(void)const " (?GetAsDouble@FieldValue@OGRFeature@@QEBANXZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: char const * __cdecl OGRFeature::FieldValue::GetAsString(void)const " (?GetAsString@FieldValue@OGRFeature@@QEBAPEBDXZ)" in Funktion ""public: __cdecl OGRFeature::FieldValue::operator char const *(void)const " (??BFieldValue@OGRFeature@@QEBAPEBDXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: char const * __cdecl OGRFeature::FieldValue::GetAsString(void)const " (?GetAsString@FieldValue@OGRFeature@@QEBAPEBDXZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: class std::vector<int,class std::allocator<int> > const & __cdecl OGRFeature::FieldValue::GetAsIntegerList(void)const " (?GetAsIntegerList@FieldValue@OGRFeature@@QEBAAEBV?$vector@HV?$allocator@H@std@@@std@@XZ)" in Funktion ""public: __cdecl OGRFeature::FieldValue::operator class std::vector<int,class std::allocator<int> > const &(void)const " (??BFieldValue@OGRFeature@@QEBAAEBV?$vector@HV?$allocator@H@std@@@std@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: class std::vector<int,class std::allocator<int> > const & __cdecl OGRFeature::FieldValue::GetAsIntegerList(void)const " (?GetAsIntegerList@FieldValue@OGRFeature@@QEBAAEBV?$vector@HV?$allocator@H@std@@@std@@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: class std::vector<__int64,class std::allocator<__int64> > const & __cdecl OGRFeature::FieldValue::GetAsInteger64List(void)const " (?GetAsInteger64List@FieldValue@OGRFeature@@QEBAAEBV?$vector@_JV?$allocator@_J@std@@@std@@XZ)" in Funktion ""public: __cdecl OGRFeature::FieldValue::operator class std::vector<__int64,class std::allocator<__int64> > const &(void)const " (??BFieldValue@OGRFeature@@QEBAAEBV?$vector@_JV?$allocator@_J@std@@@std@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: class std::vector<__int64,class std::allocator<__int64> > const & __cdecl OGRFeature::FieldValue::GetAsInteger64List(void)const " (?GetAsInteger64List@FieldValue@OGRFeature@@QEBAAEBV?$vector@_JV?$allocator@_J@std@@@std@@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: class std::vector<double,class std::allocator<double> > const & __cdecl OGRFeature::FieldValue::GetAsDoubleList(void)const " (?GetAsDoubleList@FieldValue@OGRFeature@@QEBAAEBV?$vector@NV?$allocator@N@std@@@std@@XZ)" in Funktion ""public: __cdecl OGRFeature::FieldValue::operator class std::vector<double,class std::allocator<double> > const &(void)const " (??BFieldValue@OGRFeature@@QEBAAEBV?$vector@NV?$allocator@N@std@@@std@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: class std::vector<double,class std::allocator<double> > const & __cdecl OGRFeature::FieldValue::GetAsDoubleList(void)const " (?GetAsDoubleList@FieldValue@OGRFeature@@QEBAAEBV?$vector@NV?$allocator@N@std@@@std@@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: class std::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::allocator<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > const & __cdecl OGRFeature::FieldValue::GetAsStringList(void)const " (?GetAsStringList@FieldValue@OGRFeature@@QEBAAEBV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ)" in Funktion ""public: __cdecl OGRFeature::FieldValue::operator class std::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::allocator<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > const &(void)const " (??BFieldValue@OGRFeature@@QEBAAEBV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: class std::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::allocator<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > const & __cdecl OGRFeature::FieldValue::GetAsStringList(void)const " (?GetAsStringList@FieldValue@OGRFeature@@QEBAAEBV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: int __cdecl OGRFeature::GetFieldAsInteger(int)const " (?GetFieldAsInteger@OGRFeature@@QEBAHH@Z)" in Funktion ""public: int __cdecl OGRFeature::GetFieldAsInteger(char const *)const " (?GetFieldAsInteger@OGRFeature@@QEBAHPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: int __cdecl OGRFeature::GetFieldAsInteger(int)const " (?GetFieldAsInteger@OGRFeature@@QEBAHH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __int64 __cdecl OGRFeature::GetFieldAsInteger64(int)const " (?GetFieldAsInteger64@OGRFeature@@QEBA_JH@Z)" in Funktion ""public: __int64 __cdecl OGRFeature::GetFieldAsInteger64(char const *)const " (?GetFieldAsInteger64@OGRFeature@@QEBA_JPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __int64 __cdecl OGRFeature::GetFieldAsInteger64(int)const " (?GetFieldAsInteger64@OGRFeature@@QEBA_JH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: double __cdecl OGRFeature::GetFieldAsDouble(int)const " (?GetFieldAsDouble@OGRFeature@@QEBANH@Z)" in Funktion ""public: double __cdecl OGRFeature::GetFieldAsDouble(char const *)const " (?GetFieldAsDouble@OGRFeature@@QEBANPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: double __cdecl OGRFeature::GetFieldAsDouble(int)const " (?GetFieldAsDouble@OGRFeature@@QEBANH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: char const * __cdecl OGRFeature::GetFieldAsString(int)const " (?GetFieldAsString@OGRFeature@@QEBAPEBDH@Z)" in Funktion ""public: char const * __cdecl OGRFeature::GetFieldAsString(char const *)const " (?GetFieldAsString@OGRFeature@@QEBAPEBDPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: char const * __cdecl OGRFeature::GetFieldAsString(int)const " (?GetFieldAsString@OGRFeature@@QEBAPEBDH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: int const * __cdecl OGRFeature::GetFieldAsIntegerList(int,int *)const " (?GetFieldAsIntegerList@OGRFeature@@QEBAPEBHHPEAH@Z)" in Funktion ""public: int const * __cdecl OGRFeature::GetFieldAsIntegerList(char const *,int *)const " (?GetFieldAsIntegerList@OGRFeature@@QEBAPEBHPEBDPEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: int const * __cdecl OGRFeature::GetFieldAsIntegerList(int,int *)const " (?GetFieldAsIntegerList@OGRFeature@@QEBAPEBHHPEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __int64 const * __cdecl OGRFeature::GetFieldAsInteger64List(int,int *)const " (?GetFieldAsInteger64List@OGRFeature@@QEBAPEB_JHPEAH@Z)" in Funktion ""public: __int64 const * __cdecl OGRFeature::GetFieldAsInteger64List(char const *,int *)const " (?GetFieldAsInteger64List@OGRFeature@@QEBAPEB_JPEBDPEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __int64 const * __cdecl OGRFeature::GetFieldAsInteger64List(int,int *)const " (?GetFieldAsInteger64List@OGRFeature@@QEBAPEB_JHPEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: double const * __cdecl OGRFeature::GetFieldAsDoubleList(int,int *)const " (?GetFieldAsDoubleList@OGRFeature@@QEBAPEBNHPEAH@Z)" in Funktion ""public: double const * __cdecl OGRFeature::GetFieldAsDoubleList(char const *,int *)const " (?GetFieldAsDoubleList@OGRFeature@@QEBAPEBNPEBDPEAH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: double const * __cdecl OGRFeature::GetFieldAsDoubleList(int,int *)const " (?GetFieldAsDoubleList@OGRFeature@@QEBAPEBNHPEAH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: char * * __cdecl OGRFeature::GetFieldAsStringList(int)const " (?GetFieldAsStringList@OGRFeature@@QEBAPEAPEADH@Z)" in Funktion ""public: char * * __cdecl OGRFeature::GetFieldAsStringList(char const *)const " (?GetFieldAsStringList@OGRFeature@@QEBAPEAPEADPEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: char * * __cdecl OGRFeature::GetFieldAsStringList(int)const " (?GetFieldAsStringList@OGRFeature@@QEBAPEAPEADH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,int)" (?SetField@OGRFeature@@QEAAXHH@Z)" in Funktion ""public: void __cdecl OGRFeature::SetField(char const *,int)" (?SetField@OGRFeature@@QEAAXPEBDH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,int)" (?SetField@OGRFeature@@QEAAXHH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,__int64)" (?SetField@OGRFeature@@QEAAXH_J@Z)" in Funktion ""public: void __cdecl OGRFeature::SetField(char const *,__int64)" (?SetField@OGRFeature@@QEAAXPEBD_J@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,__int64)" (?SetField@OGRFeature@@QEAAXH_J@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,double)" (?SetField@OGRFeature@@QEAAXHN@Z)" in Funktion ""public: void __cdecl OGRFeature::SetField(char const *,double)" (?SetField@OGRFeature@@QEAAXPEBDN@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,double)" (?SetField@OGRFeature@@QEAAXHN@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,char const *)" (?SetField@OGRFeature@@QEAAXHPEBD@Z)" in Funktion ""public: void __cdecl OGRFeature::SetField(char const *,char const *)" (?SetField@OGRFeature@@QEAAXPEBD0@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,char const *)" (?SetField@OGRFeature@@QEAAXHPEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,int,int const *)" (?SetField@OGRFeature@@QEAAXHHPEBH@Z)" in Funktion ""public: void __cdecl OGRFeature::SetField(char const *,int,int const *)" (?SetField@OGRFeature@@QEAAXPEBDHPEBH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,int,int const *)" (?SetField@OGRFeature@@QEAAXHHPEBH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,int,__int64 const *)" (?SetField@OGRFeature@@QEAAXHHPEB_J@Z)" in Funktion ""public: void __cdecl OGRFeature::SetField(char const *,int,__int64 const *)" (?SetField@OGRFeature@@QEAAXPEBDHPEB_J@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,int,__int64 const *)" (?SetField@OGRFeature@@QEAAXHHPEB_J@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,int,double const *)" (?SetField@OGRFeature@@QEAAXHHPEBN@Z)" in Funktion ""public: void __cdecl OGRFeature::SetField(char const *,int,double const *)" (?SetField@OGRFeature@@QEAAXPEBDHPEBN@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,int,double const *)" (?SetField@OGRFeature@@QEAAXHHPEBN@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,char const * const *)" (?SetField@OGRFeature@@QEAAXHPEBQEBD@Z)" in Funktion ""public: void __cdecl OGRFeature::SetField(char const *,char const * const *)" (?SetField@OGRFeature@@QEAAXPEBDPEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,char const * const *)" (?SetField@OGRFeature@@QEAAXHPEBQEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,union OGRField *)" (?SetField@OGRFeature@@QEAAXHPEATOGRField@@@Z)" in Funktion ""public: void __cdecl OGRFeature::SetField(char const *,union OGRField *)" (?SetField@OGRFeature@@QEAAXPEBDPEATOGRField@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,union OGRField *)" (?SetField@OGRFeature@@QEAAXHPEATOGRField@@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,int,int,int,int,int,float,int)" (?SetField@OGRFeature@@QEAAXHHHHHHMH@Z)" in Funktion ""public: void __cdecl OGRFeature::SetField(char const *,int,int,int,int,int,float,int)" (?SetField@OGRFeature@@QEAAXPEBDHHHHHMH@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: void __cdecl OGRFeature::SetField(int,int,int,int,int,int,float,int)" (?SetField@OGRFeature@@QEAAXHHHHHHMH@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __cdecl GDALColorTable::GDALColorTable(enum GDALPaletteInterp)" (??0GDALColorTable@@QEAA@W4GDALPaletteInterp@@@Z)" in Funktion ""public: void __cdecl GDALColorTable::`default constructor closure'(void)" (??_FGDALColorTable@@QEAAXXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __cdecl GDALColorTable::GDALColorTable(enum GDALPaletteInterp)" (??0GDALColorTable@@QEAA@W4GDALPaletteInterp@@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __cdecl GDALExtendedDataType::~GDALExtendedDataType(void)" (??1GDALExtendedDataType@@QEAA@XZ)" in Funktion ""int `public: __cdecl GDALAttributeNumeric::GDALAttributeNumeric(class dtor$3 const &)'::`1'::dtor$3" (?dtor$3@?0???0GDALAttributeNumeric@@QEAA@AEBV0@@Z@4HA)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __cdecl GDALExtendedDataType::~GDALExtendedDataType(void)" (??1GDALExtendedDataType@@QEAA@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: __cdecl GDALExtendedDataType::GDALExtendedDataType(class GDALExtendedDataType const &)" (??0GDALExtendedDataType@@QEAA@AEBV0@@Z)" in Funktion ""public: __cdecl GDALAttributeNumeric::GDALAttributeNumeric(class GDALAttributeNumeric &&)" (??0GDALAttributeNumeric@@QEAA@$$QEAV0@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: __cdecl GDALExtendedDataType::GDALExtendedDataType(class GDALExtendedDataType const &)" (??0GDALExtendedDataType@@QEAA@AEBV0@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: class GDALExtendedDataType & __cdecl GDALExtendedDataType::operator=(class GDALExtendedDataType &&)" (??4GDALExtendedDataType@@QEAAAEAV0@$$QEAV0@@Z)" in Funktion ""public: class GDALAttributeNumeric & __cdecl GDALAttributeNumeric::operator=(class GDALAttributeNumeric &&)" (??4GDALAttributeNumeric@@QEAAAEAV0@$$QEAV0@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: class GDALExtendedDataType & __cdecl GDALExtendedDataType::operator=(class GDALExtendedDataType &&)" (??4GDALExtendedDataType@@QEAAAEAV0@$$QEAV0@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: bool __cdecl GDALExtendedDataType::operator==(class GDALExtendedDataType const &)const " (??8GDALExtendedDataType@@QEBA_NAEBV0@@Z)" in Funktion ""public: bool __cdecl GDALExtendedDataType::operator!=(class GDALExtendedDataType const &)const " (??9GDALExtendedDataType@@QEBA_NAEBV0@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: bool __cdecl GDALExtendedDataType::operator==(class GDALExtendedDataType const &)const " (??8GDALExtendedDataType@@QEBA_NAEBV0@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""private: __cdecl GDALExtendedDataType::GDALExtendedDataType(unsigned __int64)" (??0GDALExtendedDataType@@AEAA@_K@Z)" in Funktion ""public: void __cdecl GDALExtendedDataType::`default constructor closure'(void)" (??_FGDALExtendedDataType@@QEAAXXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""private: __cdecl GDALExtendedDataType::GDALExtendedDataType(unsigned __int64)" (??0GDALExtendedDataType@@AEAA@_K@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: virtual __cdecl GDALIHasAttribute::~GDALIHasAttribute(void)" (??1GDALIHasAttribute@@UEAA@XZ)" in Funktion ""int `public: __cdecl GDALGroup::GDALGroup(class dtor$0 const &)'::`1'::dtor$0" (?dtor$0@?0???0GDALGroup@@QEAA@AEBV0@@Z@4HA)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual __cdecl GDALIHasAttribute::~GDALIHasAttribute(void)" (??1GDALIHasAttribute@@UEAA@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALAttribute> __cdecl GDALIHasAttribute::GetAttribute(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)const " (?GetAttribute@GDALIHasAttribute@@UEBA?AV?$shared_ptr@VGDALAttribute@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALAttribute> __cdecl GDALIHasAttribute::GetAttribute(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)const " (?GetAttribute@GDALIHasAttribute@@UEBA?AV?$shared_ptr@VGDALAttribute@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::shared_ptr<class GDALAttribute>,class std::allocator<class std::shared_ptr<class GDALAttribute> > > __cdecl GDALIHasAttribute::GetAttributes(char const * const *)const " (?GetAttributes@GDALIHasAttribute@@UEBA?AV?$vector@V?$shared_ptr@VGDALAttribute@@@std@@V?$allocator@V?$shared_ptr@VGDALAttribute@@@std@@@2@@std@@PEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::shared_ptr<class GDALAttribute>,class std::allocator<class std::shared_ptr<class GDALAttribute> > > __cdecl GDALIHasAttribute::GetAttributes(char const * const *)const " (?GetAttributes@GDALIHasAttribute@@UEBA?AV?$vector@V?$shared_ptr@VGDALAttribute@@@std@@V?$allocator@V?$shared_ptr@VGDALAttribute@@@std@@@2@@std@@PEBQEBD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALAttribute> __cdecl GDALIHasAttribute::CreateAttribute(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::vector<unsigned __int64,class std::allocator<unsigned __int64> > const &,class GDALExtendedDataType const &,char const * const *)" (?CreateAttribute@GDALIHasAttribute@@UEAA?AV?$shared_ptr@VGDALAttribute@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@AEBV?$vector@_KV?$allocator@_K@std@@@3@AEBVGDALExtendedDataType@@PEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALAttribute> __cdecl GDALIHasAttribute::CreateAttribute(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::vector<unsigned __int64,class std::allocator<unsigned __int64> > const &,class GDALExtendedDataType const &,char const * const *)" (?CreateAttribute@GDALIHasAttribute@@UEAA?AV?$shared_ptr@VGDALAttribute@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@AEBV?$vector@_KV?$allocator@_K@std@@@3@AEBVGDALExtendedDataType@@PEBQEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: virtual __cdecl GDALGroup::~GDALGroup(void)" (??1GDALGroup@@UEAA@XZ)" in Funktion ""public: virtual void * __cdecl GDALGroup::`vector deleting destructor'(unsigned int)" (??_EGDALGroup@@UEAAPEAXI@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual __cdecl GDALGroup::~GDALGroup(void)" (??1GDALGroup@@UEAA@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::allocator<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > __cdecl GDALGroup::GetMDArrayNames(char const * const *)const " (?GetMDArrayNames@GDALGroup@@UEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::allocator<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > __cdecl GDALGroup::GetMDArrayNames(char const * const *)const " (?GetMDArrayNames@GDALGroup@@UEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PEBQEBD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALGroup::OpenMDArray(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,char const * const *)const " (?OpenMDArray@GDALGroup@@UEBA?AV?$shared_ptr@VGDALMDArray@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@PEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALGroup::OpenMDArray(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,char const * const *)const " (?OpenMDArray@GDALGroup@@UEBA?AV?$shared_ptr@VGDALMDArray@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@PEBQEBD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::allocator<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > __cdecl GDALGroup::GetGroupNames(char const * const *)const " (?GetGroupNames@GDALGroup@@UEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >,class std::allocator<class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > > > __cdecl GDALGroup::GetGroupNames(char const * const *)const " (?GetGroupNames@GDALGroup@@UEBA?AV?$vector@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$allocator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@2@@std@@PEBQEBD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALGroup> __cdecl GDALGroup::OpenGroup(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,char const * const *)const " (?OpenGroup@GDALGroup@@UEBA?AV?$shared_ptr@VGDALGroup@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@PEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALGroup> __cdecl GDALGroup::OpenGroup(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,char const * const *)const " (?OpenGroup@GDALGroup@@UEBA?AV?$shared_ptr@VGDALGroup@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@PEBQEBD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::shared_ptr<class GDALDimension>,class std::allocator<class std::shared_ptr<class GDALDimension> > > __cdecl GDALGroup::GetDimensions(char const * const *)const " (?GetDimensions@GDALGroup@@UEBA?AV?$vector@V?$shared_ptr@VGDALDimension@@@std@@V?$allocator@V?$shared_ptr@VGDALDimension@@@std@@@2@@std@@PEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::shared_ptr<class GDALDimension>,class std::allocator<class std::shared_ptr<class GDALDimension> > > __cdecl GDALGroup::GetDimensions(char const * const *)const " (?GetDimensions@GDALGroup@@UEBA?AV?$vector@V?$shared_ptr@VGDALDimension@@@std@@V?$allocator@V?$shared_ptr@VGDALDimension@@@std@@@2@@std@@PEBQEBD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALGroup> __cdecl GDALGroup::CreateGroup(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,char const * const *)" (?CreateGroup@GDALGroup@@UEAA?AV?$shared_ptr@VGDALGroup@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@PEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALGroup> __cdecl GDALGroup::CreateGroup(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,char const * const *)" (?CreateGroup@GDALGroup@@UEAA?AV?$shared_ptr@VGDALGroup@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@PEBQEBD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALDimension> __cdecl GDALGroup::CreateDimension(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned __int64,char const * const *)" (?CreateDimension@GDALGroup@@UEAA?AV?$shared_ptr@VGDALDimension@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00_KPEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALDimension> __cdecl GDALGroup::CreateDimension(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned __int64,char const * const *)" (?CreateDimension@GDALGroup@@UEAA?AV?$shared_ptr@VGDALDimension@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@00_KPEBQEBD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALGroup::CreateMDArray(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::vector<class std::shared_ptr<class GDALDimension>,class std::allocator<class std::shared_ptr<class GDALDimension> > > const &,class GDALExtendedDataType const &,char const * const *)" (?CreateMDArray@GDALGroup@@UEAA?AV?$shared_ptr@VGDALMDArray@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@AEBV?$vector@V?$shared_ptr@VGDALDimension@@@std@@V?$allocator@V?$shared_ptr@VGDALDimension@@@std@@@2@@3@AEBVGDALExtendedDataType@@PEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALGroup::CreateMDArray(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,class std::vector<class std::shared_ptr<class GDALDimension>,class std::allocator<class std::shared_ptr<class GDALDimension> > > const &,class GDALExtendedDataType const &,char const * const *)" (?CreateMDArray@GDALGroup@@UEAA?AV?$shared_ptr@VGDALMDArray@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@AEBV?$vector@V?$shared_ptr@VGDALDimension@@@std@@V?$allocator@V?$shared_ptr@VGDALDimension@@@std@@@2@@3@AEBVGDALExtendedDataType@@PEBQEBD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALGroup::CopyFrom(class std::shared_ptr<class GDALGroup> const &,class GDALDataset *,class std::shared_ptr<class GDALGroup> const &,bool,unsigned __int64 &,unsigned __int64,int (__cdecl*)(double,char const *,void *),void *)" (?CopyFrom@GDALGroup@@UEAA_NAEBV?$shared_ptr@VGDALGroup@@@std@@PEAVGDALDataset@@0_NAEA_K_KP6AHNPEBDPEAX@Z6@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALGroup::CopyFrom(class std::shared_ptr<class GDALGroup> const &,class GDALDataset *,class std::shared_ptr<class GDALGroup> const &,bool,unsigned __int64 &,unsigned __int64,int (__cdecl*)(double,char const *,void *),void *)" (?CopyFrom@GDALGroup@@UEAA_NAEBV?$shared_ptr@VGDALGroup@@@std@@PEAVGDALDataset@@0_NAEA_K_KP6AHNPEBDPEAX@Z6@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual char const * const * __cdecl GDALGroup::GetStructuralInfo(void)const " (?GetStructuralInfo@GDALGroup@@UEBAPEBQEBDXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual char const * const * __cdecl GDALGroup::GetStructuralInfo(void)const " (?GetStructuralInfo@GDALGroup@@UEBAPEBQEBDXZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""protected: virtual bool __cdecl GDALAbstractMDArray::IWrite(unsigned __int64 const *,unsigned __int64 const *,__int64 const *,__int64 const *,class GDALExtendedDataType const &,void const *)" (?IWrite@GDALAbstractMDArray@@MEAA_NPEB_K0PEB_J1AEBVGDALExtendedDataType@@PEBX@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""protected: virtual bool __cdecl GDALAbstractMDArray::IWrite(unsigned __int64 const *,unsigned __int64 const *,__int64 const *,__int64 const *,class GDALExtendedDataType const &,void const *)" (?IWrite@GDALAbstractMDArray@@MEAA_NPEB_K0PEB_J1AEBVGDALExtendedDataType@@PEBX@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: virtual __cdecl GDALAbstractMDArray::~GDALAbstractMDArray(void)" (??1GDALAbstractMDArray@@UEAA@XZ)" in Funktion ""int `public: __cdecl GDALAttributeNumeric::GDALAttributeNumeric(class dtor$0 &&)'::`1'::dtor$0" (?dtor$0@?0???0GDALAttributeNumeric@@QEAA@$$QEAV0@@Z@4HA)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual __cdecl GDALAbstractMDArray::~GDALAbstractMDArray(void)" (??1GDALAbstractMDArray@@UEAA@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual unsigned __int64 __cdecl GDALAbstractMDArray::GetDimensionCount(void)const " (?GetDimensionCount@GDALAbstractMDArray@@UEBA_KXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual unsigned __int64 __cdecl GDALAbstractMDArray::GetDimensionCount(void)const " (?GetDimensionCount@GDALAbstractMDArray@@UEBA_KXZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<unsigned __int64,class std::allocator<unsigned __int64> > __cdecl GDALAbstractMDArray::GetBlockSize(void)const " (?GetBlockSize@GDALAbstractMDArray@@UEBA?AV?$vector@_KV?$allocator@_K@std@@@std@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<unsigned __int64,class std::allocator<unsigned __int64> > __cdecl GDALAbstractMDArray::GetBlockSize(void)const " (?GetBlockSize@GDALAbstractMDArray@@UEBA?AV?$vector@_KV?$allocator@_K@std@@@std@@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<unsigned __int64,class std::allocator<unsigned __int64> > __cdecl GDALAbstractMDArray::GetProcessingChunkSize(unsigned __int64)const " (?GetProcessingChunkSize@GDALAbstractMDArray@@UEBA?AV?$vector@_KV?$allocator@_K@std@@@std@@_K@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<unsigned __int64,class std::allocator<unsigned __int64> > __cdecl GDALAbstractMDArray::GetProcessingChunkSize(unsigned __int64)const " (?GetProcessingChunkSize@GDALAbstractMDArray@@UEBA?AV?$vector@_KV?$allocator@_K@std@@@std@@_K@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALAbstractMDArray::ProcessPerChunk(unsigned __int64 const *,unsigned __int64 const *,unsigned __int64 const *,bool (__cdecl*)(class GDALAbstractMDArray *,unsigned __int64 const *,unsigned __int64 const *,unsigned __int64,unsigned __int64,void *),void *)" (?ProcessPerChunk@GDALAbstractMDArray@@UEAA_NPEB_K00P6A_NPEAV1@00_K2PEAX@Z3@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALAbstractMDArray::ProcessPerChunk(unsigned __int64 const *,unsigned __int64 const *,unsigned __int64 const *,bool (__cdecl*)(class GDALAbstractMDArray *,unsigned __int64 const *,unsigned __int64 const *,unsigned __int64,unsigned __int64,void *),void *)" (?ProcessPerChunk@GDALAbstractMDArray@@UEAA_NPEB_K00P6A_NPEAV1@00_K2PEAX@Z3@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""protected: virtual bool __cdecl GDALAttributeString::IRead(unsigned __int64 const *,unsigned __int64 const *,__int64 const *,__int64 const *,class GDALExtendedDataType const &,void *)const " (?IRead@GDALAttributeString@@MEBA_NPEB_K0PEB_J1AEBVGDALExtendedDataType@@PEAX@Z)" in Funktion ""[thunk]:protected: virtual bool __cdecl GDALAttributeString::IRead`vtordisp{4294967292,0}' (unsigned __int64 const *,unsigned __int64 const *,__int64 const *,__int64 const *,class GDALExtendedDataType const &,void *)const " (?IRead@GDALAttributeString@@$2PPPPPPPM@A@EBA_NPEB_K0PEB_J1AEBVGDALExtendedDataType@@PEAX@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""protected: virtual bool __cdecl GDALAttributeString::IRead(unsigned __int64 const *,unsigned __int64 const *,__int64 const *,__int64 const *,class GDALExtendedDataType const &,void *)const " (?IRead@GDALAttributeString@@MEBA_NPEB_K0PEB_J1AEBVGDALExtendedDataType@@PEAX@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::shared_ptr<class GDALDimension>,class std::allocator<class std::shared_ptr<class GDALDimension> > > const & __cdecl GDALAttributeString::GetDimensions(void)const " (?GetDimensions@GDALAttributeString@@UEBAAEBV?$vector@V?$shared_ptr@VGDALDimension@@@std@@V?$allocator@V?$shared_ptr@VGDALDimension@@@std@@@2@@std@@XZ)" in Funktion ""[thunk]:public: virtual class std::vector<class std::shared_ptr<class GDALDimension>,class std::allocator<class std::shared_ptr<class GDALDimension> > > const & __cdecl GDALAttributeString::GetDimensions`vtordisp{4294967292,0}' (void)const " (?GetDimensions@GDALAttributeString@@$4PPPPPPPM@A@EBAAEBV?$vector@V?$shared_ptr@VGDALDimension@@@std@@V?$allocator@V?$shared_ptr@VGDALDimension@@@std@@@2@@std@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::shared_ptr<class GDALDimension>,class std::allocator<class std::shared_ptr<class GDALDimension> > > const & __cdecl GDALAttributeString::GetDimensions(void)const " (?GetDimensions@GDALAttributeString@@UEBAAEBV?$vector@V?$shared_ptr@VGDALDimension@@@std@@V?$allocator@V?$shared_ptr@VGDALDimension@@@std@@@2@@std@@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: virtual class GDALExtendedDataType const & __cdecl GDALAttributeString::GetDataType(void)const " (?GetDataType@GDALAttributeString@@UEBAAEBVGDALExtendedDataType@@XZ)" in Funktion ""[thunk]:public: virtual class GDALExtendedDataType const & __cdecl GDALAttributeString::GetDataType`vtordisp{4294967292,0}' (void)const " (?GetDataType@GDALAttributeString@@$4PPPPPPPM@A@EBAAEBVGDALExtendedDataType@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class GDALExtendedDataType const & __cdecl GDALAttributeString::GetDataType(void)const " (?GetDataType@GDALAttributeString@@UEBAAEBVGDALExtendedDataType@@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""protected: virtual bool __cdecl GDALAttributeNumeric::IRead(unsigned __int64 const *,unsigned __int64 const *,__int64 const *,__int64 const *,class GDALExtendedDataType const &,void *)const " (?IRead@GDALAttributeNumeric@@MEBA_NPEB_K0PEB_J1AEBVGDALExtendedDataType@@PEAX@Z)" in Funktion ""[thunk]:protected: virtual bool __cdecl GDALAttributeNumeric::IRead`vtordisp{4294967292,0}' (unsigned __int64 const *,unsigned __int64 const *,__int64 const *,__int64 const *,class GDALExtendedDataType const &,void *)const " (?IRead@GDALAttributeNumeric@@$2PPPPPPPM@A@EBA_NPEB_K0PEB_J1AEBVGDALExtendedDataType@@PEAX@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""protected: virtual bool __cdecl GDALAttributeNumeric::IRead(unsigned __int64 const *,unsigned __int64 const *,__int64 const *,__int64 const *,class GDALExtendedDataType const &,void *)const " (?IRead@GDALAttributeNumeric@@MEBA_NPEB_K0PEB_J1AEBVGDALExtendedDataType@@PEAX@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::shared_ptr<class GDALDimension>,class std::allocator<class std::shared_ptr<class GDALDimension> > > const & __cdecl GDALAttributeNumeric::GetDimensions(void)const " (?GetDimensions@GDALAttributeNumeric@@UEBAAEBV?$vector@V?$shared_ptr@VGDALDimension@@@std@@V?$allocator@V?$shared_ptr@VGDALDimension@@@std@@@2@@std@@XZ)" in Funktion ""[thunk]:public: virtual class std::vector<class std::shared_ptr<class GDALDimension>,class std::allocator<class std::shared_ptr<class GDALDimension> > > const & __cdecl GDALAttributeNumeric::GetDimensions`vtordisp{4294967292,0}' (void)const " (?GetDimensions@GDALAttributeNumeric@@$4PPPPPPPM@A@EBAAEBV?$vector@V?$shared_ptr@VGDALDimension@@@std@@V?$allocator@V?$shared_ptr@VGDALDimension@@@std@@@2@@std@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::shared_ptr<class GDALDimension>,class std::allocator<class std::shared_ptr<class GDALDimension> > > const & __cdecl GDALAttributeNumeric::GetDimensions(void)const " (?GetDimensions@GDALAttributeNumeric@@UEBAAEBV?$vector@V?$shared_ptr@VGDALDimension@@@std@@V?$allocator@V?$shared_ptr@VGDALDimension@@@std@@@2@@std@@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: virtual class GDALExtendedDataType const & __cdecl GDALAttributeNumeric::GetDataType(void)const " (?GetDataType@GDALAttributeNumeric@@UEBAAEBVGDALExtendedDataType@@XZ)" in Funktion ""[thunk]:public: virtual class GDALExtendedDataType const & __cdecl GDALAttributeNumeric::GetDataType`vtordisp{4294967292,0}' (void)const " (?GetDataType@GDALAttributeNumeric@@$4PPPPPPPM@A@EBAAEBVGDALExtendedDataType@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class GDALExtendedDataType const & __cdecl GDALAttributeNumeric::GetDataType(void)const " (?GetDataType@GDALAttributeNumeric@@UEBAAEBVGDALExtendedDataType@@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""private: class std::shared_ptr<class GDALMDArray> __cdecl GDALMDArray::GetView(class std::vector<unsigned __int64,class std::allocator<unsigned __int64> > const &)const " (?GetView@GDALMDArray@@AEBA?AV?$shared_ptr@VGDALMDArray@@@std@@AEBV?$vector@_KV?$allocator@_K@std@@@3@@Z)" in Funktion ""private: class std::shared_ptr<class GDALMDArray> __cdecl GDALMDArray::atInternal(class std::vector<unsigned __int64,class std::allocator<unsigned __int64> > &)const " (?atInternal@GDALMDArray@@AEBA?AV?$shared_ptr@VGDALMDArray@@@std@@AEAV?$vector@_KV?$allocator@_K@std@@@3@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""private: class std::shared_ptr<class GDALMDArray> __cdecl GDALMDArray::GetView(class std::vector<unsigned __int64,class std::allocator<unsigned __int64> > const &)const " (?GetView@GDALMDArray@@AEBA?AV?$shared_ptr@VGDALMDArray@@@std@@AEBV?$vector@_KV?$allocator@_K@std@@@3@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALMDArray::CopyFrom(class GDALDataset *,class GDALMDArray const *,bool,unsigned __int64 &,unsigned __int64,int (__cdecl*)(double,char const *,void *),void *)" (?CopyFrom@GDALMDArray@@UEAA_NPEAVGDALDataset@@PEBV1@_NAEA_K_KP6AHNPEBDPEAX@Z6@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALMDArray::CopyFrom(class GDALDataset *,class GDALMDArray const *,bool,unsigned __int64 &,unsigned __int64,int (__cdecl*)(double,char const *,void *),void *)" (?CopyFrom@GDALMDArray@@UEAA_NPEAVGDALDataset@@PEBV1@_NAEA_K_KP6AHNPEBDPEAX@Z6@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual char const * const * __cdecl GDALMDArray::GetStructuralInfo(void)const " (?GetStructuralInfo@GDALMDArray@@UEBAPEBQEBDXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual char const * const * __cdecl GDALMDArray::GetStructuralInfo(void)const " (?GetStructuralInfo@GDALMDArray@@UEBAPEBQEBDXZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __cdecl GDALMDArray::GetUnit(void)const " (?GetUnit@GDALMDArray@@UEBAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const & __cdecl GDALMDArray::GetUnit(void)const " (?GetUnit@GDALMDArray@@UEBAAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALMDArray::SetUnit(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)" (?SetUnit@GDALMDArray@@UEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALMDArray::SetUnit(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)" (?SetUnit@GDALMDArray@@UEAA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALMDArray::SetSpatialRef(class OGRSpatialReference const *)" (?SetSpatialRef@GDALMDArray@@UEAA_NPEBVOGRSpatialReference@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALMDArray::SetSpatialRef(class OGRSpatialReference const *)" (?SetSpatialRef@GDALMDArray@@UEAA_NPEBVOGRSpatialReference@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class OGRSpatialReference> __cdecl GDALMDArray::GetSpatialRef(void)const " (?GetSpatialRef@GDALMDArray@@UEBA?AV?$shared_ptr@VOGRSpatialReference@@@std@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class OGRSpatialReference> __cdecl GDALMDArray::GetSpatialRef(void)const " (?GetSpatialRef@GDALMDArray@@UEBA?AV?$shared_ptr@VOGRSpatialReference@@@std@@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void const * __cdecl GDALMDArray::GetRawNoDataValue(void)const " (?GetRawNoDataValue@GDALMDArray@@UEBAPEBXXZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual void const * __cdecl GDALMDArray::GetRawNoDataValue(void)const " (?GetRawNoDataValue@GDALMDArray@@UEBAPEBXXZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALMDArray::SetRawNoDataValue(void const *)" (?SetRawNoDataValue@GDALMDArray@@UEAA_NPEBX@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALMDArray::SetRawNoDataValue(void const *)" (?SetRawNoDataValue@GDALMDArray@@UEAA_NPEBX@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual double __cdecl GDALMDArray::GetOffset(bool *)const " (?GetOffset@GDALMDArray@@UEBANPEA_N@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual double __cdecl GDALMDArray::GetOffset(bool *)const " (?GetOffset@GDALMDArray@@UEBANPEA_N@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual double __cdecl GDALMDArray::GetScale(bool *)const " (?GetScale@GDALMDArray@@UEBANPEA_N@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual double __cdecl GDALMDArray::GetScale(bool *)const " (?GetScale@GDALMDArray@@UEBANPEA_N@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALMDArray::SetOffset(double)" (?SetOffset@GDALMDArray@@UEAA_NN@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALMDArray::SetOffset(double)" (?SetOffset@GDALMDArray@@UEAA_NN@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALMDArray::SetScale(double)" (?SetScale@GDALMDArray@@UEAA_NN@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALMDArray::SetScale(double)" (?SetScale@GDALMDArray@@UEAA_NN@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALMDArray::Transpose(class std::vector<int,class std::allocator<int> > const &)const " (?Transpose@GDALMDArray@@UEBA?AV?$shared_ptr@VGDALMDArray@@@std@@AEBV?$vector@HV?$allocator@H@std@@@3@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALMDArray::Transpose(class std::vector<int,class std::allocator<int> > const &)const " (?Transpose@GDALMDArray@@UEBA?AV?$shared_ptr@VGDALMDArray@@@std@@AEBV?$vector@HV?$allocator@H@std@@@3@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALMDArray::GetMask(char const * const *)const " (?GetMask@GDALMDArray@@UEBA?AV?$shared_ptr@VGDALMDArray@@@std@@PEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALMDArray::GetMask(char const * const *)const " (?GetMask@GDALMDArray@@UEBA?AV?$shared_ptr@VGDALMDArray@@@std@@PEBQEBD@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class GDALDataset * __cdecl GDALMDArray::AsClassicDataset(unsigned __int64,unsigned __int64)const " (?AsClassicDataset@GDALMDArray@@UEBAPEAVGDALDataset@@_K0@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class GDALDataset * __cdecl GDALMDArray::AsClassicDataset(unsigned __int64,unsigned __int64)const " (?AsClassicDataset@GDALMDArray@@UEBAPEAVGDALDataset@@_K0@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALMDArray::GetView(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool,class std::vector<struct GDALMDArray::ViewSpec,class std::allocator<struct GDALMDArray::ViewSpec> > &)const " (?GetView@GDALMDArray@@UEBA?AV?$shared_ptr@VGDALMDArray@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@_NAEAV?$vector@UViewSpec@GDALMDArray@@V?$allocator@UViewSpec@GDALMDArray@@@std@@@3@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALMDArray::GetView(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,bool,class std::vector<struct GDALMDArray::ViewSpec,class std::allocator<struct GDALMDArray::ViewSpec> > &)const " (?GetView@GDALMDArray@@UEBA?AV?$shared_ptr@VGDALMDArray@@@std@@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@_NAEAV?$vector@UViewSpec@GDALMDArray@@V?$allocator@UViewSpec@GDALMDArray@@@std@@@3@@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""protected: virtual bool __cdecl GDALMDArrayRegularlySpaced::IRead(unsigned __int64 const *,unsigned __int64 const *,__int64 const *,__int64 const *,class GDALExtendedDataType const &,void *)const " (?IRead@GDALMDArrayRegularlySpaced@@MEBA_NPEB_K0PEB_J1AEBVGDALExtendedDataType@@PEAX@Z)" in Funktion ""[thunk]:protected: virtual bool __cdecl GDALMDArrayRegularlySpaced::IRead`vtordisp{4294967292,0}' (unsigned __int64 const *,unsigned __int64 const *,__int64 const *,__int64 const *,class GDALExtendedDataType const &,void *)const " (?IRead@GDALMDArrayRegularlySpaced@@$2PPPPPPPM@A@EBA_NPEB_K0PEB_J1AEBVGDALExtendedDataType@@PEAX@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""protected: virtual bool __cdecl GDALMDArrayRegularlySpaced::IRead(unsigned __int64 const *,unsigned __int64 const *,__int64 const *,__int64 const *,class GDALExtendedDataType const &,void *)const " (?IRead@GDALMDArrayRegularlySpaced@@MEBA_NPEB_K0PEB_J1AEBVGDALExtendedDataType@@PEAX@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::shared_ptr<class GDALDimension>,class std::allocator<class std::shared_ptr<class GDALDimension> > > const & __cdecl GDALMDArrayRegularlySpaced::GetDimensions(void)const " (?GetDimensions@GDALMDArrayRegularlySpaced@@UEBAAEBV?$vector@V?$shared_ptr@VGDALDimension@@@std@@V?$allocator@V?$shared_ptr@VGDALDimension@@@std@@@2@@std@@XZ)" in Funktion ""[thunk]:public: virtual class std::vector<class std::shared_ptr<class GDALDimension>,class std::allocator<class std::shared_ptr<class GDALDimension> > > const & __cdecl GDALMDArrayRegularlySpaced::GetDimensions`vtordisp{4294967292,0}' (void)const " (?GetDimensions@GDALMDArrayRegularlySpaced@@$4PPPPPPPM@A@EBAAEBV?$vector@V?$shared_ptr@VGDALDimension@@@std@@V?$allocator@V?$shared_ptr@VGDALDimension@@@std@@@2@@std@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::shared_ptr<class GDALDimension>,class std::allocator<class std::shared_ptr<class GDALDimension> > > const & __cdecl GDALMDArrayRegularlySpaced::GetDimensions(void)const " (?GetDimensions@GDALMDArrayRegularlySpaced@@UEBAAEBV?$vector@V?$shared_ptr@VGDALDimension@@@std@@V?$allocator@V?$shared_ptr@VGDALDimension@@@std@@@2@@std@@XZ)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: virtual class GDALExtendedDataType const & __cdecl GDALMDArrayRegularlySpaced::GetDataType(void)const " (?GetDataType@GDALMDArrayRegularlySpaced@@UEBAAEBVGDALExtendedDataType@@XZ)" in Funktion ""[thunk]:public: virtual class GDALExtendedDataType const & __cdecl GDALMDArrayRegularlySpaced::GetDataType`vtordisp{4294967292,0}' (void)const " (?GetDataType@GDALMDArrayRegularlySpaced@@$4PPPPPPPM@A@EBAAEBVGDALExtendedDataType@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class GDALExtendedDataType const & __cdecl GDALMDArrayRegularlySpaced::GetDataType(void)const " (?GetDataType@GDALMDArrayRegularlySpaced@@UEBAAEBVGDALExtendedDataType@@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::shared_ptr<class GDALAttribute>,class std::allocator<class std::shared_ptr<class GDALAttribute> > > __cdecl GDALMDArrayRegularlySpaced::GetAttributes(char const * const *)const " (?GetAttributes@GDALMDArrayRegularlySpaced@@UEBA?AV?$vector@V?$shared_ptr@VGDALAttribute@@@std@@V?$allocator@V?$shared_ptr@VGDALAttribute@@@std@@@2@@std@@PEBQEBD@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::vector<class std::shared_ptr<class GDALAttribute>,class std::allocator<class std::shared_ptr<class GDALAttribute> > > __cdecl GDALMDArrayRegularlySpaced::GetAttributes(char const * const *)const " (?GetAttributes@GDALMDArrayRegularlySpaced@@UEBA?AV?$vector@V?$shared_ptr@VGDALAttribute@@@std@@V?$allocator@V?$shared_ptr@VGDALAttribute@@@std@@@2@@std@@PEBQEBD@Z)".
Population.obj : error LNK2019: Verweis auf nicht aufgelöstes externes Symbol ""public: virtual __cdecl GDALDimension::~GDALDimension(void)" (??1GDALDimension@@UEAA@XZ)" in Funktion ""public: virtual __cdecl GDALDimensionWeakIndexingVar::~GDALDimensionWeakIndexingVar(void)" (??1GDALDimensionWeakIndexingVar@@UEAA@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual __cdecl GDALDimension::~GDALDimension(void)" (??1GDALDimension@@UEAA@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALDimension::GetIndexingVariable(void)const " (?GetIndexingVariable@GDALDimension@@UEBA?AV?$shared_ptr@VGDALMDArray@@@std@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALDimension::GetIndexingVariable(void)const " (?GetIndexingVariable@GDALDimension@@UEBA?AV?$shared_ptr@VGDALMDArray@@@std@@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALDimension::SetIndexingVariable(class std::shared_ptr<class GDALMDArray>)" (?SetIndexingVariable@GDALDimension@@UEAA_NV?$shared_ptr@VGDALMDArray@@@std@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALDimension::SetIndexingVariable(class std::shared_ptr<class GDALMDArray>)" (?SetIndexingVariable@GDALDimension@@UEAA_NV?$shared_ptr@VGDALMDArray@@@std@@@Z)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALDimensionWeakIndexingVar::GetIndexingVariable(void)const " (?GetIndexingVariable@GDALDimensionWeakIndexingVar@@UEBA?AV?$shared_ptr@VGDALMDArray@@@std@@XZ)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual class std::shared_ptr<class GDALMDArray> __cdecl GDALDimensionWeakIndexingVar::GetIndexingVariable(void)const " (?GetIndexingVariable@GDALDimensionWeakIndexingVar@@UEBA?AV?$shared_ptr@VGDALMDArray@@@std@@XZ)".
Population.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALDimensionWeakIndexingVar::SetIndexingVariable(class std::shared_ptr<class GDALMDArray>)" (?SetIndexingVariable@GDALDimensionWeakIndexingVar@@UEAA_NV?$shared_ptr@VGDALMDArray@@@std@@@Z)".
risk_path.obj : error LNK2001: Nicht aufgelöstes externes Symbol ""public: virtual bool __cdecl GDALDimensionWeakIndexingVar::SetIndexingVariable(class std::shared_ptr<class GDALMDArray>)" (?SetIndexingVariable@GDALDimensionWeakIndexingVar@@UEAA_NV?$shared_ptr@VGDALMDArray@@@std@@@Z)".
C:\Users\carst\source\repos\risk_path\x64\Debug\risk_path.exe : fatal error LNK1120: 220 nicht aufgelöste Externe
